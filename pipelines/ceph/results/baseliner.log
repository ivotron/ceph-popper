
2018-05-09 19:53:07,631 p=10 u=root |  PLAY [all] *********************************************************************
2018-05-09 19:53:07,640 p=10 u=root |  TASK [Gathering Facts] *********************************************************
2018-05-09 19:53:07,641 p=10 u=root |  Wednesday 09 May 2018  19:53:07 +0000 (0:00:00.065)       0:00:00.065 ********* 
2018-05-09 19:53:15,818 p=10 u=root |  ok: [node0]
2018-05-09 19:53:15,914 p=10 u=root |  ok: [node1]
2018-05-09 19:53:15,921 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-09 19:53:15,921 p=10 u=root |  Wednesday 09 May 2018  19:53:15 +0000 (0:00:08.280)       0:00:08.346 ********* 
2018-05-09 19:53:15,992 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/check_preconditions.yml for node0, node1
2018-05-09 19:53:16,003 p=10 u=root |  TASK [baseliner : ensure expected variables are defined] ***********************
2018-05-09 19:53:16,003 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.081)       0:00:08.427 ********* 
2018-05-09 19:53:16,124 p=10 u=root |  ok: [node0] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-09 19:53:16,148 p=10 u=root |  ok: [node1] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-09 19:53:16,158 p=10 u=root |  TASK [baseliner : set remote results path if not defined] **********************
2018-05-09 19:53:16,159 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.155)       0:00:08.583 ********* 
2018-05-09 19:53:16,284 p=10 u=root |  ok: [node0]
2018-05-09 19:53:16,289 p=10 u=root |  ok: [node1]
2018-05-09 19:53:16,298 p=10 u=root |  TASK [baseliner : ensure results folder exists] ********************************
2018-05-09 19:53:16,299 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.139)       0:00:08.723 ********* 
2018-05-09 19:53:16,625 p=10 u=root |  ok: [node0 -> localhost]
2018-05-09 19:53:16,634 p=10 u=root |  TASK [baseliner : check that pre-tasks file exists] ****************************
2018-05-09 19:53:16,635 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.336)       0:00:09.059 ********* 
2018-05-09 19:53:16,656 p=10 u=root |  TASK [baseliner : check that post-tasks file exists] ***************************
2018-05-09 19:53:16,656 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.021)       0:00:09.081 ********* 
2018-05-09 19:53:16,695 p=10 u=root |  TASK [baseliner : ensure docker-engine is installed] ***************************
2018-05-09 19:53:16,695 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.038)       0:00:09.119 ********* 
2018-05-09 19:53:16,731 p=10 u=root |  TASK [baseliner : install statically linked docker] ****************************
2018-05-09 19:53:16,731 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.036)       0:00:09.155 ********* 
2018-05-09 19:53:16,771 p=10 u=root |  TASK [baseliner : ensure the docker daemon is running] *************************
2018-05-09 19:53:16,771 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.039)       0:00:09.195 ********* 
2018-05-09 19:53:16,819 p=10 u=root |  TASK [baseliner : stop any running container] **********************************
2018-05-09 19:53:16,820 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.048)       0:00:09.244 ********* 
2018-05-09 19:53:16,855 p=10 u=root |  TASK [baseliner : remove containers to avoid name clashes] *********************
2018-05-09 19:53:16,855 p=10 u=root |  Wednesday 09 May 2018  19:53:16 +0000 (0:00:00.035)       0:00:09.279 ********* 
2018-05-09 19:53:17,760 p=10 u=root |  fatal: [node0]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.484909", "end": "2018-05-09 19:53:17.744552", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-09 19:53:17.259643", "stderr": "Error response from daemon: You cannot remove a running container 3c719dbb452de7cc3eef33abbca00e343d7b4c9916f060edec4cbd1083dc7964. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container ad1920ae57f212bee6e8d8e614aee7b37228d9abc6eb85273032274dc4ae8fce. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 37b3586ddc1286b9ff5ad8f44eadbbaf2552139a84542cfe0dbb11de849f88ed. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container 3c719dbb452de7cc3eef33abbca00e343d7b4c9916f060edec4cbd1083dc7964. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container ad1920ae57f212bee6e8d8e614aee7b37228d9abc6eb85273032274dc4ae8fce. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 37b3586ddc1286b9ff5ad8f44eadbbaf2552139a84542cfe0dbb11de849f88ed. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-09 19:53:17,760 p=10 u=root |  ...ignoring
2018-05-09 19:53:17,775 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.489257", "end": "2018-05-09 19:53:17.759018", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-09 19:53:17.269761", "stderr": "Error response from daemon: You cannot remove a running container 3c719dbb452de7cc3eef33abbca00e343d7b4c9916f060edec4cbd1083dc7964. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container ad1920ae57f212bee6e8d8e614aee7b37228d9abc6eb85273032274dc4ae8fce. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 37b3586ddc1286b9ff5ad8f44eadbbaf2552139a84542cfe0dbb11de849f88ed. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container 3c719dbb452de7cc3eef33abbca00e343d7b4c9916f060edec4cbd1083dc7964. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container ad1920ae57f212bee6e8d8e614aee7b37228d9abc6eb85273032274dc4ae8fce. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 37b3586ddc1286b9ff5ad8f44eadbbaf2552139a84542cfe0dbb11de849f88ed. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-09 19:53:17,775 p=10 u=root |  ...ignoring
2018-05-09 19:53:17,784 p=10 u=root |  TASK [baseliner : store facts] *************************************************
2018-05-09 19:53:17,784 p=10 u=root |  Wednesday 09 May 2018  19:53:17 +0000 (0:00:00.928)       0:00:10.209 ********* 
2018-05-09 19:53:17,838 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/store-facts.yml for node0, node1
2018-05-09 19:53:17,856 p=10 u=root |  TASK [baseliner : install facter] **********************************************
2018-05-09 19:53:17,856 p=10 u=root |  Wednesday 09 May 2018  19:53:17 +0000 (0:00:00.071)       0:00:10.280 ********* 
2018-05-09 19:53:19,287 p=10 u=root |  ok: [node1]
2018-05-09 19:53:19,312 p=10 u=root |  ok: [node0]
2018-05-09 19:53:19,322 p=10 u=root |  TASK [baseliner : create facts folder if it doesn't exist] *********************
2018-05-09 19:53:19,323 p=10 u=root |  Wednesday 09 May 2018  19:53:19 +0000 (0:00:01.466)       0:00:11.747 ********* 
2018-05-09 19:53:19,491 p=10 u=root |  ok: [node0 -> localhost]
2018-05-09 19:53:19,506 p=10 u=root |  TASK [baseliner : store facts about remotes] ***********************************
2018-05-09 19:53:19,506 p=10 u=root |  Wednesday 09 May 2018  19:53:19 +0000 (0:00:00.183)       0:00:11.931 ********* 
2018-05-09 19:53:20,027 p=10 u=root |  changed: [node0 -> localhost] => (item=node0)
2018-05-09 19:53:20,323 p=10 u=root |  changed: [node0 -> localhost] => (item=node1)
2018-05-09 19:53:20,330 p=10 u=root |  TASK [baseliner : start monitoring] ********************************************
2018-05-09 19:53:20,331 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.824)       0:00:12.755 ********* 
2018-05-09 19:53:20,368 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-09 19:53:20,368 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.037)       0:00:12.792 ********* 
2018-05-09 19:53:20,399 p=10 u=root |  TASK [baseliner : get number of repetitions] ***********************************
2018-05-09 19:53:20,399 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.031)       0:00:12.823 ********* 
2018-05-09 19:53:20,507 p=10 u=root |  ok: [node1] => (item=1)
2018-05-09 19:53:20,509 p=10 u=root |  ok: [node0] => (item=1)
2018-05-09 19:53:20,516 p=10 u=root |  TASK [baseliner : execute each benchmark] **************************************
2018-05-09 19:53:20,516 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.116)       0:00:12.940 ********* 
2018-05-09 19:53:20,589 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench.yml for node0, node1
2018-05-09 19:53:20,616 p=10 u=root |  TASK [baseliner : upload files] ************************************************
2018-05-09 19:53:20,616 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.100)       0:00:13.040 ********* 
2018-05-09 19:53:20,657 p=10 u=root |  TASK [baseliner : initialize parameters and add number of repetitions] *********
2018-05-09 19:53:20,657 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.041)       0:00:13.082 ********* 
2018-05-09 19:53:20,748 p=10 u=root |  ok: [node0]
2018-05-09 19:53:20,770 p=10 u=root |  ok: [node1]
2018-05-09 19:53:20,778 p=10 u=root |  TASK [baseliner : unnest parameters when parameters for benchmark were passed] ***
2018-05-09 19:53:20,779 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.121)       0:00:13.203 ********* 
2018-05-09 19:53:20,823 p=10 u=root |  TASK [baseliner : parametrized execution] **************************************
2018-05-09 19:53:20,823 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.044)       0:00:13.248 ********* 
2018-05-09 19:53:20,946 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench-parametrized.yml for node0, node1
2018-05-09 19:53:20,959 p=10 u=root |  TASK [baseliner : remove remote results folder] ********************************
2018-05-09 19:53:20,959 p=10 u=root |  Wednesday 09 May 2018  19:53:20 +0000 (0:00:00.135)       0:00:13.384 ********* 
2018-05-09 19:53:21,228 p=10 u=root |  ok: [node0]
2018-05-09 19:53:21,251 p=10 u=root |  ok: [node1]
2018-05-09 19:53:21,260 p=10 u=root |  TASK [baseliner : create remote results folder] ********************************
2018-05-09 19:53:21,260 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.300)       0:00:13.684 ********* 
2018-05-09 19:53:21,520 p=10 u=root |  changed: [node1]
2018-05-09 19:53:21,522 p=10 u=root |  changed: [node0]
2018-05-09 19:53:21,528 p=10 u=root |  TASK [baseliner : initialize parameter dictionary] *****************************
2018-05-09 19:53:21,528 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.268)       0:00:13.953 ********* 
2018-05-09 19:53:21,599 p=10 u=root |  ok: [node0]
2018-05-09 19:53:21,610 p=10 u=root |  ok: [node1]
2018-05-09 19:53:21,617 p=10 u=root |  TASK [baseliner : populate parameter dictionary] *******************************
2018-05-09 19:53:21,617 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.089)       0:00:14.042 ********* 
2018-05-09 19:53:21,692 p=10 u=root |  ok: [node0] => (item=[u'repetition', u'1'])
2018-05-09 19:53:21,718 p=10 u=root |  ok: [node1] => (item=[u'repetition', u'1'])
2018-05-09 19:53:21,726 p=10 u=root |  TASK [baseliner : merge default variables to the benchmark-specific options] ***
2018-05-09 19:53:21,726 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.108)       0:00:14.150 ********* 
2018-05-09 19:53:21,798 p=10 u=root |  ok: [node0]
2018-05-09 19:53:21,817 p=10 u=root |  ok: [node1]
2018-05-09 19:53:21,826 p=10 u=root |  TASK [baseliner : initialize string for path] **********************************
2018-05-09 19:53:21,826 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.099)       0:00:14.250 ********* 
2018-05-09 19:53:21,905 p=10 u=root |  ok: [node0]
2018-05-09 19:53:21,911 p=10 u=root |  ok: [node1]
2018-05-09 19:53:21,920 p=10 u=root |  TASK [baseliner : add key/value pairs for each parameter (if any)] *************
2018-05-09 19:53:21,921 p=10 u=root |  Wednesday 09 May 2018  19:53:21 +0000 (0:00:00.094)       0:00:14.345 ********* 
2018-05-09 19:53:21,998 p=10 u=root |  ok: [node0] => (item={'key': u'repetition', 'value': u'1'})
2018-05-09 19:53:22,025 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-09 19:53:22,034 p=10 u=root |  TASK [baseliner : ensure output folder exists] *********************************
2018-05-09 19:53:22,035 p=10 u=root |  Wednesday 09 May 2018  19:53:22 +0000 (0:00:00.113)       0:00:14.459 ********* 
2018-05-09 19:53:22,215 p=10 u=root |  ok: [node0 -> localhost]
2018-05-09 19:53:22,229 p=10 u=root |  ok: [node1 -> localhost]
2018-05-09 19:53:22,236 p=10 u=root |  TASK [baseliner : run containerized benchmark] *********************************
2018-05-09 19:53:22,237 p=10 u=root |  Wednesday 09 May 2018  19:53:22 +0000 (0:00:00.202)       0:00:14.661 ********* 
2018-05-09 19:53:22,410 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-container.yml for node0, node1
2018-05-09 19:53:22,430 p=10 u=root |  TASK [baseliner : check if image already exists] *******************************
2018-05-09 19:53:22,430 p=10 u=root |  Wednesday 09 May 2018  19:53:22 +0000 (0:00:00.193)       0:00:14.855 ********* 
2018-05-09 19:53:23,166 p=10 u=root |  changed: [node1]
2018-05-09 19:53:23,166 p=10 u=root |  changed: [node0]
2018-05-09 19:53:23,172 p=10 u=root |  TASK [baseliner : pull image] **************************************************
2018-05-09 19:53:23,173 p=10 u=root |  Wednesday 09 May 2018  19:53:23 +0000 (0:00:00.742)       0:00:15.597 ********* 
2018-05-09 19:53:24,734 p=10 u=root |  changed: [node0]
2018-05-09 19:53:24,738 p=10 u=root |  changed: [node1]
2018-05-09 19:53:24,745 p=10 u=root |  TASK [baseliner : define name of container] ************************************
2018-05-09 19:53:24,746 p=10 u=root |  Wednesday 09 May 2018  19:53:24 +0000 (0:00:01.572)       0:00:17.170 ********* 
2018-05-09 19:53:24,818 p=10 u=root |  ok: [node0]
2018-05-09 19:53:24,828 p=10 u=root |  ok: [node1]
2018-05-09 19:53:24,836 p=10 u=root |  TASK [baseliner : initialize docker_flags variable] ****************************
2018-05-09 19:53:24,836 p=10 u=root |  Wednesday 09 May 2018  19:53:24 +0000 (0:00:00.090)       0:00:17.261 ********* 
2018-05-09 19:53:24,907 p=10 u=root |  ok: [node0]
2018-05-09 19:53:24,924 p=10 u=root |  ok: [node1]
2018-05-09 19:53:24,931 p=10 u=root |  TASK [baseliner : add environment to docker_flags] *****************************
2018-05-09 19:53:24,931 p=10 u=root |  Wednesday 09 May 2018  19:53:24 +0000 (0:00:00.094)       0:00:17.355 ********* 
2018-05-09 19:53:24,975 p=10 u=root |  TASK [baseliner : add implicit environment from bench_params variable] *********
2018-05-09 19:53:24,976 p=10 u=root |  Wednesday 09 May 2018  19:53:24 +0000 (0:00:00.045)       0:00:17.400 ********* 
2018-05-09 19:53:25,062 p=10 u=root |  ok: [node0] => (item={'key': u'repetition', 'value': u'1'})
2018-05-09 19:53:25,080 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-09 19:53:25,088 p=10 u=root |  TASK [baseliner : check if we have host-specific environment] ******************
2018-05-09 19:53:25,089 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.112)       0:00:17.513 ********* 
2018-05-09 19:53:25,178 p=10 u=root |  ok: [node0]
2018-05-09 19:53:25,191 p=10 u=root |  ok: [node1]
2018-05-09 19:53:25,200 p=10 u=root |  TASK [baseliner : add host-specific environment to docker_flags] ***************
2018-05-09 19:53:25,200 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.111)       0:00:17.625 ********* 
2018-05-09 19:53:25,298 p=10 u=root |  ok: [node1] => (item={'key': u'MONITOR', 'value': True})
2018-05-09 19:53:25,299 p=10 u=root |  ok: [node0] => (item={'key': u'CLINET', 'value': True})
2018-05-09 19:53:25,351 p=10 u=root |  ok: [node1] => (item={'key': u'OSD', 'value': True})
2018-05-09 19:53:25,362 p=10 u=root |  TASK [baseliner : add devices to docker_flags] *********************************
2018-05-09 19:53:25,363 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.162)       0:00:17.787 ********* 
2018-05-09 19:53:25,400 p=10 u=root |  TASK [baseliner : add network mode to docker_flags] ****************************
2018-05-09 19:53:25,401 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.038)       0:00:17.825 ********* 
2018-05-09 19:53:25,435 p=10 u=root |  TASK [baseliner : add ipc mode to docker_flags] ********************************
2018-05-09 19:53:25,435 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.034)       0:00:17.859 ********* 
2018-05-09 19:53:25,473 p=10 u=root |  TASK [baseliner : add ports to docker_flags] ***********************************
2018-05-09 19:53:25,473 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.038)       0:00:17.898 ********* 
2018-05-09 19:53:25,515 p=10 u=root |  TASK [baseliner : add volumes to docker_flags] *********************************
2018-05-09 19:53:25,515 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.041)       0:00:17.939 ********* 
2018-05-09 19:53:25,546 p=10 u=root |  TASK [baseliner : add default volumes to docker_flags] *************************
2018-05-09 19:53:25,546 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.031)       0:00:17.971 ********* 
2018-05-09 19:53:25,614 p=10 u=root |  ok: [node0]
2018-05-09 19:53:25,631 p=10 u=root |  ok: [node1]
2018-05-09 19:53:25,636 p=10 u=root |  TASK [baseliner : set entrypoint] **********************************************
2018-05-09 19:53:25,636 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.089)       0:00:18.061 ********* 
2018-05-09 19:53:25,667 p=10 u=root |  TASK [baseliner : set limits] **************************************************
2018-05-09 19:53:25,667 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.031)       0:00:18.092 ********* 
2018-05-09 19:53:25,704 p=10 u=root |  TASK [baseliner : add capabilities] ********************************************
2018-05-09 19:53:25,704 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.036)       0:00:18.128 ********* 
2018-05-09 19:53:25,738 p=10 u=root |  TASK [baseliner : remove capabilities] *****************************************
2018-05-09 19:53:25,738 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.033)       0:00:18.162 ********* 
2018-05-09 19:53:25,768 p=10 u=root |  TASK [baseliner : set privileged mode] *****************************************
2018-05-09 19:53:25,768 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.030)       0:00:18.193 ********* 
2018-05-09 19:53:25,805 p=10 u=root |  TASK [baseliner : set memory constraint] ***************************************
2018-05-09 19:53:25,805 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.036)       0:00:18.229 ********* 
2018-05-09 19:53:25,839 p=10 u=root |  TASK [baseliner : set memory-swap constraint] **********************************
2018-05-09 19:53:25,839 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.034)       0:00:18.264 ********* 
2018-05-09 19:53:25,875 p=10 u=root |  TASK [baseliner : set parent cgroup] *******************************************
2018-05-09 19:53:25,875 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.036)       0:00:18.300 ********* 
2018-05-09 19:53:25,921 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-09 19:53:25,921 p=10 u=root |  Wednesday 09 May 2018  19:53:25 +0000 (0:00:00.045)       0:00:18.346 ********* 
2018-05-09 19:53:25,996 p=10 u=root |  ok: [node0] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e CLINET=\"True\" -v /tmp/baseliner_output_node0:/results -v /tmp/baseliner_output_node0:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-09 19:53:26,012 p=10 u=root |  ok: [node1] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e MONITOR=\"True\" -e OSD=\"True\" -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-09 19:53:26,021 p=10 u=root |  TASK [baseliner : run container] ***********************************************
2018-05-09 19:53:26,021 p=10 u=root |  Wednesday 09 May 2018  19:53:26 +0000 (0:00:00.099)       0:00:18.445 ********* 
2018-05-09 19:53:27,218 p=10 u=root |  changed: [node0]
2018-05-09 19:53:27,245 p=10 u=root |  changed: [node1]
2018-05-09 19:53:27,262 p=10 u=root |  TASK [baseliner : wait for containers in parallel mode and stop/kill them if they timeout] ***
2018-05-09 19:53:27,262 p=10 u=root |  Wednesday 09 May 2018  19:53:27 +0000 (0:00:01.241)       0:00:19.686 ********* 
2018-05-09 19:53:27,301 p=10 u=root |  TASK [baseliner : wait for containers in single-node mode and stop/kill them if they timeout] ***
2018-05-09 19:53:27,301 p=10 u=root |  Wednesday 09 May 2018  19:53:27 +0000 (0:00:00.039)       0:00:19.725 ********* 
2018-05-09 19:54:34,156 p=10 u=root |  changed: [node0 -> localhost]
2018-05-09 19:54:34,170 p=10 u=root |  TASK [baseliner : get wait result] *********************************************
2018-05-09 19:54:34,170 p=10 u=root |  Wednesday 09 May 2018  19:54:34 +0000 (0:01:06.869)       0:01:26.595 ********* 
2018-05-09 19:54:34,197 p=10 u=root |  ok: [node0 -> localhost]
2018-05-09 19:54:34,210 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-09 19:54:34,211 p=10 u=root |  Wednesday 09 May 2018  19:54:34 +0000 (0:00:00.040)       0:01:26.635 ********* 
2018-05-09 19:54:34,237 p=10 u=root |  ok: [node0 -> localhost] => {
    "msg": "WAIT_FOR_RESULT:  2 hosts finished running their containers"
}
2018-05-09 19:54:34,245 p=10 u=root |  TASK [baseliner : get result of container execution] ***************************
2018-05-09 19:54:34,246 p=10 u=root |  Wednesday 09 May 2018  19:54:34 +0000 (0:00:00.035)       0:01:26.670 ********* 
2018-05-09 19:54:34,673 p=10 u=root |  fatal: [node0]: FAILED! => {"ansible_job_id": "454371691237.2912", "changed": true, "cmd": "docker run --rm --name baseliner_node0  -e repetition=\"1\" -e CLINET=\"True\" -v /tmp/baseliner_output_node0:/results -v /tmp/baseliner_output_node0:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.617120", "end": "2018-05-09 19:53:27.940037", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 1, "start": "2018-05-09 19:53:26.322917", "stderr": "+ '[' -z '' ']'\n+ '[' -z '' ']'\n+ '[' -z '' ']'\n+ echo 'Expecting one of MONITOR, OSD or CLIENT variables'\n+ exit 1", "stderr_lines": ["+ '[' -z '' ']'", "+ '[' -z '' ']'", "+ '[' -z '' ']'", "+ echo 'Expecting one of MONITOR, OSD or CLIENT variables'", "+ exit 1"], "stdout": "Expecting one of MONITOR, OSD or CLIENT variables", "stdout_lines": ["Expecting one of MONITOR, OSD or CLIENT variables"]}
2018-05-09 19:54:34,673 p=10 u=root |  ...ignoring
2018-05-09 19:54:34,678 p=10 u=root |  fatal: [node1]: FAILED! => {"ansible_job_id": "22080734010.2926", "changed": true, "cmd": "docker run --rm --name baseliner_node1  -e repetition=\"1\" -e MONITOR=\"True\" -e OSD=\"True\" -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.663332", "end": "2018-05-09 19:53:27.993568", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 1, "start": "2018-05-09 19:53:26.330236", "stderr": "+ '[' -z True ']'\n+ '[' -z '' ']'\n+ echo 'Expecting CEPH_PUBLIC_NETWORK and MON_IP variables'\n+ exit 1", "stderr_lines": ["+ '[' -z True ']'", "+ '[' -z '' ']'", "+ echo 'Expecting CEPH_PUBLIC_NETWORK and MON_IP variables'", "+ exit 1"], "stdout": "Expecting CEPH_PUBLIC_NETWORK and MON_IP variables", "stdout_lines": ["Expecting CEPH_PUBLIC_NETWORK and MON_IP variables"]}
2018-05-09 19:54:34,678 p=10 u=root |  ...ignoring
2018-05-09 19:54:34,685 p=10 u=root |  TASK [baseliner : set fact to store result of bench execution] *****************
2018-05-09 19:54:34,685 p=10 u=root |  Wednesday 09 May 2018  19:54:34 +0000 (0:00:00.439)       0:01:27.110 ********* 
2018-05-09 19:54:34,708 p=10 u=root |  ok: [node0 -> localhost]
2018-05-09 19:54:34,721 p=10 u=root |  TASK [baseliner : record elapsed time in output folder] ************************
2018-05-09 19:54:34,722 p=10 u=root |  Wednesday 09 May 2018  19:54:34 +0000 (0:00:00.036)       0:01:27.146 ********* 
2018-05-09 19:54:35,071 p=10 u=root |  changed: [node0 -> localhost]
2018-05-09 19:54:35,078 p=10 u=root |  changed: [node1 -> localhost]
2018-05-09 19:54:35,090 p=10 u=root |  TASK [baseliner : capture stdout] **********************************************
2018-05-09 19:54:35,090 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.368)       0:01:27.515 ********* 
2018-05-09 19:54:35,407 p=10 u=root |  changed: [node0 -> localhost]
2018-05-09 19:54:35,433 p=10 u=root |  changed: [node1 -> localhost]
2018-05-09 19:54:35,444 p=10 u=root |  TASK [baseliner : capture stderr] **********************************************
2018-05-09 19:54:35,444 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.353)       0:01:27.868 ********* 
2018-05-09 19:54:35,745 p=10 u=root |  changed: [node0 -> localhost]
2018-05-09 19:54:35,782 p=10 u=root |  changed: [node1 -> localhost]
2018-05-09 19:54:35,787 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-09 19:54:35,788 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.343)       0:01:28.212 ********* 
2018-05-09 19:54:35,866 p=10 u=root |  ok: [node0] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-09 19:54:35,874 p=10 u=root |  ok: [node1] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-09 19:54:35,881 p=10 u=root |  TASK [baseliner : run compose benchmark] ***************************************
2018-05-09 19:54:35,882 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.093)       0:01:28.306 ********* 
2018-05-09 19:54:35,919 p=10 u=root |  TASK [baseliner : run script benchmark] ****************************************
2018-05-09 19:54:35,919 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.037)       0:01:28.343 ********* 
2018-05-09 19:54:35,953 p=10 u=root |  TASK [baseliner : download results] ********************************************
2018-05-09 19:54:35,954 p=10 u=root |  Wednesday 09 May 2018  19:54:35 +0000 (0:00:00.034)       0:01:28.378 ********* 
2018-05-09 19:54:36,012 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/download-output.yml for node0, node1
2018-05-09 19:54:36,074 p=10 u=root |  TASK [baseliner : get any bench-specific files] ********************************
2018-05-09 19:54:36,075 p=10 u=root |  Wednesday 09 May 2018  19:54:36 +0000 (0:00:00.120)       0:01:28.499 ********* 
2018-05-09 19:54:37,103 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-09 19:54:37,107 p=10 u=root |  changed: [node0] => (item=/tmp/baseliner_output_node0)
2018-05-09 19:54:37,114 p=10 u=root |  TASK [baseliner : delete remote folder after transfer] *************************
2018-05-09 19:54:37,115 p=10 u=root |  Wednesday 09 May 2018  19:54:37 +0000 (0:00:01.040)       0:01:29.539 ********* 
2018-05-09 19:54:37,440 p=10 u=root |  changed: [node0] => (item=/tmp/baseliner_output_node0)
2018-05-09 19:54:37,466 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-09 19:54:37,474 p=10 u=root |  TASK [baseliner : check if we should fail fast] ********************************
2018-05-09 19:54:37,474 p=10 u=root |  Wednesday 09 May 2018  19:54:37 +0000 (0:00:00.359)       0:01:29.899 ********* 
2018-05-09 19:54:37,531 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/fail-fast.yml for node0, node1
2018-05-09 19:54:37,688 p=10 u=root |  TASK [baseliner : failfast for single-node mode] *******************************
2018-05-09 19:54:37,689 p=10 u=root |  Wednesday 09 May 2018  19:54:37 +0000 (0:00:00.214)       0:01:30.113 ********* 
2018-05-09 19:54:37,772 p=10 u=root |  fatal: [node0]: FAILED! => {"changed": false, "failed": true, "msg": "benchmark failed"}
2018-05-09 19:54:37,773 p=10 u=root |  NO MORE HOSTS LEFT *************************************************************
2018-05-09 19:54:37,773 p=10 u=root |  PLAY RECAP *********************************************************************
2018-05-09 19:54:37,774 p=10 u=root |  node0                      : ok=46   changed=13   unreachable=0    failed=1   
2018-05-09 19:54:37,774 p=10 u=root |  node1                      : ok=39   changed=11   unreachable=0    failed=0   
2018-05-09 19:54:37,774 p=10 u=root |  Wednesday 09 May 2018  19:54:37 +0000 (0:00:00.085)       0:01:30.198 ********* 
2018-05-09 19:54:37,774 p=10 u=root |  =============================================================================== 
2018-05-09 19:54:37,774 p=10 u=root |  baseliner : wait for containers in single-node mode and stop/kill them if they timeout -- 66.87s
2018-05-09 19:54:37,774 p=10 u=root |  Gathering Facts --------------------------------------------------------- 8.28s
2018-05-09 19:54:37,774 p=10 u=root |  baseliner : pull image -------------------------------------------------- 1.57s
2018-05-09 19:54:37,774 p=10 u=root |  baseliner : install facter ---------------------------------------------- 1.47s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : run container ----------------------------------------------- 1.24s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : get any bench-specific files -------------------------------- 1.04s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : remove containers to avoid name clashes --------------------- 0.93s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : store facts about remotes ----------------------------------- 0.82s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : check if image already exists ------------------------------- 0.74s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : get result of container execution --------------------------- 0.44s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : record elapsed time in output folder ------------------------ 0.37s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : delete remote folder after transfer ------------------------- 0.36s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : capture stdout ---------------------------------------------- 0.35s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : capture stderr ---------------------------------------------- 0.34s
2018-05-09 19:54:37,775 p=10 u=root |  baseliner : ensure results folder exists -------------------------------- 0.34s
2018-05-09 19:54:37,776 p=10 u=root |  baseliner : remove remote results folder -------------------------------- 0.30s
2018-05-09 19:54:37,776 p=10 u=root |  baseliner : create remote results folder -------------------------------- 0.27s
2018-05-09 19:54:37,776 p=10 u=root |  baseliner : check if we should fail fast -------------------------------- 0.21s
2018-05-09 19:54:37,776 p=10 u=root |  baseliner : ensure output folder exists --------------------------------- 0.20s
2018-05-09 19:54:37,776 p=10 u=root |  baseliner : run containerized benchmark --------------------------------- 0.19s
2018-05-09 19:54:37,776 p=10 u=root |  Playbook run took 0 days, 0 hours, 1 minutes, 30 seconds
