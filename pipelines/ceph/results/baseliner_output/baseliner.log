
2018-06-07 05:41:34,100 p=10 u=root |  PLAY [all] *********************************************************************
2018-06-07 05:41:34,106 p=10 u=root |  TASK [Gathering Facts] *********************************************************
2018-06-07 05:41:34,106 p=10 u=root |  Thursday 07 June 2018  05:41:34 +0000 (0:00:00.041)       0:00:00.042 ********* 
2018-06-07 05:41:38,421 p=10 u=root |  ok: [node2]
2018-06-07 05:41:38,489 p=10 u=root |  ok: [node0]
2018-06-07 05:41:40,020 p=10 u=root |  ok: [node1]
2018-06-07 05:41:40,027 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-06-07 05:41:40,027 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:05.920)       0:00:05.963 ********* 
2018-06-07 05:41:40,102 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/check_preconditions.yml for node0, node1, node2
2018-06-07 05:41:40,112 p=10 u=root |  TASK [baseliner : ensure expected variables are defined] ***********************
2018-06-07 05:41:40,112 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.085)       0:00:06.048 ********* 
2018-06-07 05:41:40,204 p=10 u=root |  ok: [node0] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-06-07 05:41:40,223 p=10 u=root |  ok: [node1] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-06-07 05:41:40,223 p=10 u=root |  ok: [node2] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-06-07 05:41:40,231 p=10 u=root |  TASK [baseliner : set remote results path if not defined] **********************
2018-06-07 05:41:40,231 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.118)       0:00:06.167 ********* 
2018-06-07 05:41:40,320 p=10 u=root |  ok: [node0]
2018-06-07 05:41:40,333 p=10 u=root |  ok: [node1]
2018-06-07 05:41:40,343 p=10 u=root |  ok: [node2]
2018-06-07 05:41:40,354 p=10 u=root |  TASK [baseliner : ensure results folder exists] ********************************
2018-06-07 05:41:40,355 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.123)       0:00:06.290 ********* 
2018-06-07 05:41:40,575 p=10 u=root |  ok: [node0 -> localhost]
2018-06-07 05:41:40,584 p=10 u=root |  TASK [baseliner : check that pre-tasks file exists] ****************************
2018-06-07 05:41:40,584 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.229)       0:00:06.520 ********* 
2018-06-07 05:41:40,608 p=10 u=root |  TASK [baseliner : check that post-tasks file exists] ***************************
2018-06-07 05:41:40,608 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.023)       0:00:06.543 ********* 
2018-06-07 05:41:40,649 p=10 u=root |  TASK [baseliner : ensure docker-engine is installed] ***************************
2018-06-07 05:41:40,649 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.041)       0:00:06.585 ********* 
2018-06-07 05:41:40,691 p=10 u=root |  TASK [baseliner : install statically linked docker] ****************************
2018-06-07 05:41:40,691 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.041)       0:00:06.626 ********* 
2018-06-07 05:41:40,730 p=10 u=root |  TASK [baseliner : ensure the docker daemon is running] *************************
2018-06-07 05:41:40,730 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.039)       0:00:06.666 ********* 
2018-06-07 05:41:40,768 p=10 u=root |  TASK [baseliner : stop any running container] **********************************
2018-06-07 05:41:40,768 p=10 u=root |  Thursday 07 June 2018  05:41:40 +0000 (0:00:00.038)       0:00:06.704 ********* 
2018-06-07 05:41:42,615 p=10 u=root |  fatal: [node0]: FAILED! => {"changed": true, "cmd": "docker stop `docker ps -q`", "delta": "0:00:00.041400", "end": "2018-06-07 01:41:42.559093", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:42.517693", "stderr": "\"docker stop\" requires at least 1 argument.\nSee 'docker stop --help'.\n\nUsage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nStop one or more running containers", "stderr_lines": ["\"docker stop\" requires at least 1 argument.", "See 'docker stop --help'.", "", "Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Stop one or more running containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:42,615 p=10 u=root |  ...ignoring
2018-06-07 05:41:42,617 p=10 u=root |  fatal: [node2]: FAILED! => {"changed": true, "cmd": "docker stop `docker ps -q`", "delta": "0:00:00.042809", "end": "2018-06-07 01:41:42.561700", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:42.518891", "stderr": "\"docker stop\" requires at least 1 argument.\nSee 'docker stop --help'.\n\nUsage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nStop one or more running containers", "stderr_lines": ["\"docker stop\" requires at least 1 argument.", "See 'docker stop --help'.", "", "Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Stop one or more running containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:42,618 p=10 u=root |  ...ignoring
2018-06-07 05:41:43,004 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": true, "cmd": "docker stop `docker ps -q`", "delta": "0:00:00.427379", "end": "2018-06-07 01:41:42.948451", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:42.521072", "stderr": "\"docker stop\" requires at least 1 argument.\nSee 'docker stop --help'.\n\nUsage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nStop one or more running containers", "stderr_lines": ["\"docker stop\" requires at least 1 argument.", "See 'docker stop --help'.", "", "Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Stop one or more running containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:43,004 p=10 u=root |  ...ignoring
2018-06-07 05:41:43,017 p=10 u=root |  TASK [baseliner : remove containers to avoid name clashes] *********************
2018-06-07 05:41:43,017 p=10 u=root |  Thursday 07 June 2018  05:41:43 +0000 (0:00:02.248)       0:00:08.953 ********* 
2018-06-07 05:41:44,716 p=10 u=root |  fatal: [node2]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.039707", "end": "2018-06-07 01:41:44.664978", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:44.625271", "stderr": "\"docker rm\" requires at least 1 argument.\nSee 'docker rm --help'.\n\nUsage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nRemove one or more containers", "stderr_lines": ["\"docker rm\" requires at least 1 argument.", "See 'docker rm --help'.", "", "Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Remove one or more containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:44,716 p=10 u=root |  ...ignoring
2018-06-07 05:41:44,719 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.040350", "end": "2018-06-07 01:41:44.663969", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:44.623619", "stderr": "\"docker rm\" requires at least 1 argument.\nSee 'docker rm --help'.\n\nUsage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nRemove one or more containers", "stderr_lines": ["\"docker rm\" requires at least 1 argument.", "See 'docker rm --help'.", "", "Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Remove one or more containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:44,719 p=10 u=root |  ...ignoring
2018-06-07 05:41:44,727 p=10 u=root |  fatal: [node0]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.041455", "end": "2018-06-07 01:41:44.673938", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-06-07 01:41:44.632483", "stderr": "\"docker rm\" requires at least 1 argument.\nSee 'docker rm --help'.\n\nUsage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]\n\nRemove one or more containers", "stderr_lines": ["\"docker rm\" requires at least 1 argument.", "See 'docker rm --help'.", "", "Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...] [flags]", "", "Remove one or more containers"], "stdout": "", "stdout_lines": []}
2018-06-07 05:41:44,727 p=10 u=root |  ...ignoring
2018-06-07 05:41:44,738 p=10 u=root |  TASK [baseliner : store facts] *************************************************
2018-06-07 05:41:44,738 p=10 u=root |  Thursday 07 June 2018  05:41:44 +0000 (0:00:01.720)       0:00:10.674 ********* 
2018-06-07 05:41:44,792 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/store-facts.yml for node0, node1, node2
2018-06-07 05:41:44,809 p=10 u=root |  TASK [baseliner : install facter] **********************************************
2018-06-07 05:41:44,809 p=10 u=root |  Thursday 07 June 2018  05:41:44 +0000 (0:00:00.071)       0:00:10.745 ********* 
2018-06-07 05:41:46,894 p=10 u=root |  ok: [node2]
2018-06-07 05:41:46,912 p=10 u=root |  ok: [node0]
2018-06-07 05:41:48,082 p=10 u=root |  ok: [node1]
2018-06-07 05:41:48,099 p=10 u=root |  TASK [baseliner : create facts folder if it doesn't exist] *********************
2018-06-07 05:41:48,099 p=10 u=root |  Thursday 07 June 2018  05:41:48 +0000 (0:00:03.289)       0:00:14.035 ********* 
2018-06-07 05:41:48,207 p=10 u=root |  changed: [node0 -> localhost]
2018-06-07 05:41:48,216 p=10 u=root |  TASK [baseliner : store facts about remotes] ***********************************
2018-06-07 05:41:48,216 p=10 u=root |  Thursday 07 June 2018  05:41:48 +0000 (0:00:00.116)       0:00:14.152 ********* 
2018-06-07 05:41:48,626 p=10 u=root |  changed: [node0 -> localhost] => (item=node0)
2018-06-07 05:41:48,825 p=10 u=root |  changed: [node0 -> localhost] => (item=node1)
2018-06-07 05:41:49,023 p=10 u=root |  changed: [node0 -> localhost] => (item=node2)
2018-06-07 05:41:49,031 p=10 u=root |  TASK [baseliner : start monitoring] ********************************************
2018-06-07 05:41:49,031 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.814)       0:00:14.967 ********* 
2018-06-07 05:41:49,068 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-06-07 05:41:49,068 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.037)       0:00:15.004 ********* 
2018-06-07 05:41:49,104 p=10 u=root |  TASK [baseliner : get number of repetitions] ***********************************
2018-06-07 05:41:49,105 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.036)       0:00:15.040 ********* 
2018-06-07 05:41:49,161 p=10 u=root |  ok: [node0] => (item=1)
2018-06-07 05:41:49,170 p=10 u=root |  ok: [node1] => (item=1)
2018-06-07 05:41:49,180 p=10 u=root |  ok: [node2] => (item=1)
2018-06-07 05:41:49,188 p=10 u=root |  TASK [baseliner : execute each benchmark] **************************************
2018-06-07 05:41:49,188 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.083)       0:00:15.124 ********* 
2018-06-07 05:41:49,257 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench.yml for node0, node1, node2
2018-06-07 05:41:49,279 p=10 u=root |  TASK [baseliner : upload files] ************************************************
2018-06-07 05:41:49,279 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.090)       0:00:15.215 ********* 
2018-06-07 05:41:49,315 p=10 u=root |  TASK [baseliner : initialize parameters and add number of repetitions] *********
2018-06-07 05:41:49,315 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.035)       0:00:15.250 ********* 
2018-06-07 05:41:49,368 p=10 u=root |  ok: [node0]
2018-06-07 05:41:49,379 p=10 u=root |  ok: [node1]
2018-06-07 05:41:49,390 p=10 u=root |  ok: [node2]
2018-06-07 05:41:49,397 p=10 u=root |  TASK [baseliner : unnest parameters when parameters for benchmark were passed] ***
2018-06-07 05:41:49,397 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.082)       0:00:15.332 ********* 
2018-06-07 05:41:49,434 p=10 u=root |  TASK [baseliner : parametrized execution] **************************************
2018-06-07 05:41:49,434 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.037)       0:00:15.370 ********* 
2018-06-07 05:41:49,520 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench-parametrized.yml for node0, node1, node2
2018-06-07 05:41:49,529 p=10 u=root |  TASK [baseliner : remove remote results folder] ********************************
2018-06-07 05:41:49,529 p=10 u=root |  Thursday 07 June 2018  05:41:49 +0000 (0:00:00.094)       0:00:15.465 ********* 
2018-06-07 05:41:51,211 p=10 u=root |  ok: [node2]
2018-06-07 05:41:51,220 p=10 u=root |  ok: [node0]
2018-06-07 05:41:51,232 p=10 u=root |  ok: [node1]
2018-06-07 05:41:51,245 p=10 u=root |  TASK [baseliner : create remote results folder] ********************************
2018-06-07 05:41:51,246 p=10 u=root |  Thursday 07 June 2018  05:41:51 +0000 (0:00:01.716)       0:00:17.181 ********* 
2018-06-07 05:41:52,870 p=10 u=root |  changed: [node0]
2018-06-07 05:41:52,874 p=10 u=root |  changed: [node1]
2018-06-07 05:41:52,874 p=10 u=root |  changed: [node2]
2018-06-07 05:41:52,885 p=10 u=root |  TASK [baseliner : initialize parameter dictionary] *****************************
2018-06-07 05:41:52,886 p=10 u=root |  Thursday 07 June 2018  05:41:52 +0000 (0:00:01.640)       0:00:18.821 ********* 
2018-06-07 05:41:52,934 p=10 u=root |  ok: [node0]
2018-06-07 05:41:52,945 p=10 u=root |  ok: [node1]
2018-06-07 05:41:52,954 p=10 u=root |  ok: [node2]
2018-06-07 05:41:52,966 p=10 u=root |  TASK [baseliner : populate parameter dictionary] *******************************
2018-06-07 05:41:52,966 p=10 u=root |  Thursday 07 June 2018  05:41:52 +0000 (0:00:00.080)       0:00:18.902 ********* 
2018-06-07 05:41:53,022 p=10 u=root |  ok: [node0] => (item=[u'repetition', u'1'])
2018-06-07 05:41:53,043 p=10 u=root |  ok: [node1] => (item=[u'repetition', u'1'])
2018-06-07 05:41:53,054 p=10 u=root |  ok: [node2] => (item=[u'repetition', u'1'])
2018-06-07 05:41:53,061 p=10 u=root |  TASK [baseliner : merge default variables to the benchmark-specific options] ***
2018-06-07 05:41:53,061 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.094)       0:00:18.997 ********* 
2018-06-07 05:41:53,116 p=10 u=root |  ok: [node0]
2018-06-07 05:41:53,126 p=10 u=root |  ok: [node1]
2018-06-07 05:41:53,136 p=10 u=root |  ok: [node2]
2018-06-07 05:41:53,144 p=10 u=root |  TASK [baseliner : initialize string for path] **********************************
2018-06-07 05:41:53,144 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.082)       0:00:19.079 ********* 
2018-06-07 05:41:53,194 p=10 u=root |  ok: [node0]
2018-06-07 05:41:53,206 p=10 u=root |  ok: [node1]
2018-06-07 05:41:53,215 p=10 u=root |  ok: [node2]
2018-06-07 05:41:53,225 p=10 u=root |  TASK [baseliner : add key/value pairs for each parameter (if any)] *************
2018-06-07 05:41:53,225 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.081)       0:00:19.160 ********* 
2018-06-07 05:41:53,289 p=10 u=root |  ok: [node0] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:53,297 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:53,303 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:53,311 p=10 u=root |  TASK [baseliner : ensure output folder exists] *********************************
2018-06-07 05:41:53,312 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.086)       0:00:19.247 ********* 
2018-06-07 05:41:53,444 p=10 u=root |  changed: [node0 -> localhost]
2018-06-07 05:41:53,448 p=10 u=root |  changed: [node1 -> localhost]
2018-06-07 05:41:53,456 p=10 u=root |  changed: [node2 -> localhost]
2018-06-07 05:41:53,463 p=10 u=root |  TASK [baseliner : run containerized benchmark] *********************************
2018-06-07 05:41:53,463 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.151)       0:00:19.399 ********* 
2018-06-07 05:41:53,592 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-container.yml for node0, node1, node2
2018-06-07 05:41:53,614 p=10 u=root |  TASK [baseliner : check if image already exists] *******************************
2018-06-07 05:41:53,614 p=10 u=root |  Thursday 07 June 2018  05:41:53 +0000 (0:00:00.151)       0:00:19.550 ********* 
2018-06-07 05:41:55,361 p=10 u=root |  changed: [node2]
2018-06-07 05:41:55,362 p=10 u=root |  changed: [node0]
2018-06-07 05:41:55,365 p=10 u=root |  changed: [node1]
2018-06-07 05:41:55,373 p=10 u=root |  TASK [baseliner : pull image] **************************************************
2018-06-07 05:41:55,373 p=10 u=root |  Thursday 07 June 2018  05:41:55 +0000 (0:00:01.758)       0:00:21.309 ********* 
2018-06-07 05:41:57,529 p=10 u=root |  changed: [node2]
2018-06-07 05:41:57,818 p=10 u=root |  changed: [node0]
2018-06-07 05:41:57,983 p=10 u=root |  changed: [node1]
2018-06-07 05:41:57,990 p=10 u=root |  TASK [baseliner : define name of container] ************************************
2018-06-07 05:41:57,990 p=10 u=root |  Thursday 07 June 2018  05:41:57 +0000 (0:00:02.617)       0:00:23.926 ********* 
2018-06-07 05:41:58,089 p=10 u=root |  ok: [node0]
2018-06-07 05:41:58,096 p=10 u=root |  ok: [node1]
2018-06-07 05:41:58,103 p=10 u=root |  ok: [node2]
2018-06-07 05:41:58,110 p=10 u=root |  TASK [baseliner : initialize docker_flags variable] ****************************
2018-06-07 05:41:58,110 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.119)       0:00:24.046 ********* 
2018-06-07 05:41:58,204 p=10 u=root |  ok: [node0]
2018-06-07 05:41:58,211 p=10 u=root |  ok: [node1]
2018-06-07 05:41:58,224 p=10 u=root |  ok: [node2]
2018-06-07 05:41:58,232 p=10 u=root |  TASK [baseliner : add environment to docker_flags] *****************************
2018-06-07 05:41:58,232 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.121)       0:00:24.167 ********* 
2018-06-07 05:41:58,334 p=10 u=root |  ok: [node0] => (item={'key': u'DEBUG', 'value': u'verbose'})
2018-06-07 05:41:58,348 p=10 u=root |  ok: [node1] => (item={'key': u'DEBUG', 'value': u'verbose'})
2018-06-07 05:41:58,351 p=10 u=root |  ok: [node2] => (item={'key': u'DEBUG', 'value': u'verbose'})
2018-06-07 05:41:58,360 p=10 u=root |  TASK [baseliner : add implicit environment from bench_params variable] *********
2018-06-07 05:41:58,360 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.128)       0:00:24.296 ********* 
2018-06-07 05:41:58,474 p=10 u=root |  ok: [node0] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:58,475 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:58,487 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-06-07 05:41:58,494 p=10 u=root |  TASK [baseliner : check if we have host-specific ips] **************************
2018-06-07 05:41:58,494 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.134)       0:00:24.430 ********* 
2018-06-07 05:41:58,592 p=10 u=root |  ok: [node0]
2018-06-07 05:41:58,606 p=10 u=root |  ok: [node1]
2018-06-07 05:41:58,608 p=10 u=root |  ok: [node2]
2018-06-07 05:41:58,615 p=10 u=root |  TASK [baseliner : add host-specific ips to docker_flags] ***********************
2018-06-07 05:41:58,615 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.120)       0:00:24.550 ********* 
2018-06-07 05:41:58,655 p=10 u=root |  TASK [baseliner : check if we have host-specific environment] ******************
2018-06-07 05:41:58,655 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.040)       0:00:24.591 ********* 
2018-06-07 05:41:58,758 p=10 u=root |  ok: [node0]
2018-06-07 05:41:58,761 p=10 u=root |  ok: [node1]
2018-06-07 05:41:58,776 p=10 u=root |  ok: [node2]
2018-06-07 05:41:58,782 p=10 u=root |  TASK [baseliner : add host-specific environment to docker_flags] ***************
2018-06-07 05:41:58,783 p=10 u=root |  Thursday 07 June 2018  05:41:58 +0000 (0:00:00.127)       0:00:24.718 ********* 
2018-06-07 05:41:58,889 p=10 u=root |  ok: [node0] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'130.127.132.0/22'})
2018-06-07 05:41:58,897 p=10 u=root |  ok: [node1] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'130.127.132.0/22'})
2018-06-07 05:41:58,904 p=10 u=root |  ok: [node2] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'130.127.132.0/22'})
2018-06-07 05:41:58,929 p=10 u=root |  ok: [node0] => (item={'key': u'MON_IP', 'value': u'130.127.133.166'})
2018-06-07 05:41:58,940 p=10 u=root |  ok: [node1] => (item={'key': u'MON_IP', 'value': u'130.127.133.166'})
2018-06-07 05:41:58,943 p=10 u=root |  ok: [node2] => (item={'key': u'CLIENT', 'value': True})
2018-06-07 05:41:58,967 p=10 u=root |  ok: [node0] => (item={'key': u'MONITOR', 'value': True})
2018-06-07 05:41:58,979 p=10 u=root |  ok: [node1] => (item={'key': u'OSD', 'value': True})
2018-06-07 05:41:58,986 p=10 u=root |  ok: [node2] => (item={'key': u'MON_IP', 'value': u'130.127.133.166'})
2018-06-07 05:41:59,022 p=10 u=root |  ok: [node1] => (item={'key': u'OSD_DEVICES', 'value': u'/dev/sdb'})
2018-06-07 05:41:59,029 p=10 u=root |  TASK [baseliner : add devices to docker_flags] *********************************
2018-06-07 05:41:59,029 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.246)       0:00:24.965 ********* 
2018-06-07 05:41:59,126 p=10 u=root |  ok: [node0] => (item=/dev/sdb)
2018-06-07 05:41:59,137 p=10 u=root |  ok: [node1] => (item=/dev/sdb)
2018-06-07 05:41:59,144 p=10 u=root |  ok: [node2] => (item=/dev/sdb)
2018-06-07 05:41:59,150 p=10 u=root |  TASK [baseliner : add network mode to docker_flags] ****************************
2018-06-07 05:41:59,150 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.121)       0:00:25.086 ********* 
2018-06-07 05:41:59,245 p=10 u=root |  ok: [node0]
2018-06-07 05:41:59,261 p=10 u=root |  ok: [node1]
2018-06-07 05:41:59,262 p=10 u=root |  ok: [node2]
2018-06-07 05:41:59,271 p=10 u=root |  TASK [baseliner : add ipc mode to docker_flags] ********************************
2018-06-07 05:41:59,271 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.121)       0:00:25.207 ********* 
2018-06-07 05:41:59,315 p=10 u=root |  TASK [baseliner : add ports to docker_flags] ***********************************
2018-06-07 05:41:59,316 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.044)       0:00:25.251 ********* 
2018-06-07 05:41:59,354 p=10 u=root |  TASK [baseliner : add volumes to docker_flags] *********************************
2018-06-07 05:41:59,356 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.040)       0:00:25.292 ********* 
2018-06-07 05:41:59,397 p=10 u=root |  TASK [baseliner : add default volumes to docker_flags] *************************
2018-06-07 05:41:59,397 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.040)       0:00:25.333 ********* 
2018-06-07 05:41:59,481 p=10 u=root |  ok: [node0]
2018-06-07 05:41:59,512 p=10 u=root |  ok: [node1]
2018-06-07 05:41:59,525 p=10 u=root |  ok: [node2]
2018-06-07 05:41:59,532 p=10 u=root |  TASK [baseliner : set entrypoint] **********************************************
2018-06-07 05:41:59,532 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.135)       0:00:25.468 ********* 
2018-06-07 05:41:59,574 p=10 u=root |  TASK [baseliner : set limits] **************************************************
2018-06-07 05:41:59,574 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.041)       0:00:25.510 ********* 
2018-06-07 05:41:59,611 p=10 u=root |  TASK [baseliner : add capabilities] ********************************************
2018-06-07 05:41:59,611 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.036)       0:00:25.547 ********* 
2018-06-07 05:41:59,649 p=10 u=root |  TASK [baseliner : remove capabilities] *****************************************
2018-06-07 05:41:59,649 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.038)       0:00:25.585 ********* 
2018-06-07 05:41:59,690 p=10 u=root |  TASK [baseliner : set privileged mode] *****************************************
2018-06-07 05:41:59,690 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.041)       0:00:25.626 ********* 
2018-06-07 05:41:59,734 p=10 u=root |  TASK [baseliner : set memory constraint] ***************************************
2018-06-07 05:41:59,735 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.044)       0:00:25.670 ********* 
2018-06-07 05:41:59,779 p=10 u=root |  TASK [baseliner : set memory-swap constraint] **********************************
2018-06-07 05:41:59,779 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.044)       0:00:25.715 ********* 
2018-06-07 05:41:59,817 p=10 u=root |  TASK [baseliner : set parent cgroup] *******************************************
2018-06-07 05:41:59,817 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.037)       0:00:25.753 ********* 
2018-06-07 05:41:59,856 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-06-07 05:41:59,857 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.039)       0:00:25.792 ********* 
2018-06-07 05:41:59,909 p=10 u=root |  ok: [node0] => {
    "msg": "docker run --rm  -e DEBUG=\"verbose\" -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"130.127.132.0/22\" -e MON_IP=\"130.127.133.166\" -e MONITOR=\"True\" --device /dev/sdb --net=host -v /tmp/baseliner_output_node0:/results -v /tmp/baseliner_output_node0:/output mariettesouppe/rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-06-07 05:41:59,922 p=10 u=root |  ok: [node1] => {
    "msg": "docker run --rm  -e DEBUG=\"verbose\" -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"130.127.132.0/22\" -e MON_IP=\"130.127.133.166\" -e OSD=\"True\" -e OSD_DEVICES=\"/dev/sdb\" --device /dev/sdb --net=host -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output mariettesouppe/rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-06-07 05:41:59,931 p=10 u=root |  ok: [node2] => {
    "msg": "docker run --rm  -e DEBUG=\"verbose\" -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"130.127.132.0/22\" -e CLIENT=\"True\" -e MON_IP=\"130.127.133.166\" --device /dev/sdb --net=host -v /tmp/baseliner_output_node2:/results -v /tmp/baseliner_output_node2:/output mariettesouppe/rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-06-07 05:41:59,938 p=10 u=root |  TASK [baseliner : run container] ***********************************************
2018-06-07 05:41:59,939 p=10 u=root |  Thursday 07 June 2018  05:41:59 +0000 (0:00:00.081)       0:00:25.874 ********* 
2018-06-07 05:42:03,224 p=10 u=root |  changed: [node0]
2018-06-07 05:42:03,225 p=10 u=root |  changed: [node1]
2018-06-07 05:42:03,233 p=10 u=root |  changed: [node2]
2018-06-07 05:42:03,246 p=10 u=root |  TASK [baseliner : wait for containers in parallel mode and stop/kill them if they timeout] ***
2018-06-07 05:42:03,247 p=10 u=root |  Thursday 07 June 2018  05:42:03 +0000 (0:00:03.307)       0:00:29.182 ********* 
