
2018-05-16 03:11:52,396 p=10 u=root |  PLAY [all] *********************************************************************
2018-05-16 03:11:52,403 p=10 u=root |  TASK [Gathering Facts] *********************************************************
2018-05-16 03:11:52,403 p=10 u=root |  Wednesday 16 May 2018  03:11:52 +0000 (0:00:00.043)       0:00:00.043 ********* 
2018-05-16 03:11:56,646 p=10 u=root |  ok: [node1]
2018-05-16 03:11:56,648 p=10 u=root |  ok: [node2]
2018-05-16 03:11:56,654 p=10 u=root |  ok: [node3]
2018-05-16 03:11:56,659 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-16 03:11:56,659 p=10 u=root |  Wednesday 16 May 2018  03:11:56 +0000 (0:00:04.255)       0:00:04.299 ********* 
2018-05-16 03:11:56,711 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/check_preconditions.yml for node1, node2, node3
2018-05-16 03:11:56,719 p=10 u=root |  TASK [baseliner : ensure expected variables are defined] ***********************
2018-05-16 03:11:56,719 p=10 u=root |  Wednesday 16 May 2018  03:11:56 +0000 (0:00:00.060)       0:00:04.359 ********* 
2018-05-16 03:11:56,771 p=10 u=root |  ok: [node1] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 03:11:56,778 p=10 u=root |  ok: [node2] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 03:11:56,787 p=10 u=root |  ok: [node3] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 03:11:56,792 p=10 u=root |  TASK [baseliner : set remote results path if not defined] **********************
2018-05-16 03:11:56,793 p=10 u=root |  Wednesday 16 May 2018  03:11:56 +0000 (0:00:00.073)       0:00:04.432 ********* 
2018-05-16 03:11:56,845 p=10 u=root |  ok: [node1]
2018-05-16 03:11:56,851 p=10 u=root |  ok: [node2]
2018-05-16 03:11:56,861 p=10 u=root |  ok: [node3]
2018-05-16 03:11:56,868 p=10 u=root |  TASK [baseliner : ensure results folder exists] ********************************
2018-05-16 03:11:56,868 p=10 u=root |  Wednesday 16 May 2018  03:11:56 +0000 (0:00:00.075)       0:00:04.508 ********* 
2018-05-16 03:11:57,083 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 03:11:57,090 p=10 u=root |  TASK [baseliner : check that pre-tasks file exists] ****************************
2018-05-16 03:11:57,091 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.222)       0:00:04.730 ********* 
2018-05-16 03:11:57,110 p=10 u=root |  TASK [baseliner : check that post-tasks file exists] ***************************
2018-05-16 03:11:57,110 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.019)       0:00:04.750 ********* 
2018-05-16 03:11:57,141 p=10 u=root |  TASK [baseliner : ensure docker-engine is installed] ***************************
2018-05-16 03:11:57,141 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.030)       0:00:04.781 ********* 
2018-05-16 03:11:57,169 p=10 u=root |  TASK [baseliner : install statically linked docker] ****************************
2018-05-16 03:11:57,170 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.028)       0:00:04.809 ********* 
2018-05-16 03:11:57,198 p=10 u=root |  TASK [baseliner : ensure the docker daemon is running] *************************
2018-05-16 03:11:57,198 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.028)       0:00:04.838 ********* 
2018-05-16 03:11:57,228 p=10 u=root |  TASK [baseliner : stop any running container] **********************************
2018-05-16 03:11:57,228 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.029)       0:00:04.868 ********* 
2018-05-16 03:11:57,256 p=10 u=root |  TASK [baseliner : remove containers to avoid name clashes] *********************
2018-05-16 03:11:57,257 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.028)       0:00:04.896 ********* 
2018-05-16 03:11:57,959 p=10 u=root |  fatal: [node2]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.420393", "end": "2018-05-16 03:11:57.945809", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 03:11:57.525416", "stderr": "Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 03:11:57,959 p=10 u=root |  ...ignoring
2018-05-16 03:11:57,969 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.423989", "end": "2018-05-16 03:11:57.955113", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 03:11:57.531124", "stderr": "Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 03:11:57,969 p=10 u=root |  ...ignoring
2018-05-16 03:11:57,969 p=10 u=root |  fatal: [node3]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.423806", "end": "2018-05-16 03:11:57.954594", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 03:11:57.530788", "stderr": "Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container 3853beb60e78da36dc597dfe341d4dc1a2af7c858e20d39223287155cc2cd30c. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 137e21ad3fc32da9d4ad784355134975c0ebd0b163ca9058cacfa97f7b003256. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 39162aaf64de94ad5eb9fa762fab8f4aee5c2d4adc75dc9034a946a81a816b87. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 91e26f8109b1224794cb25b6f95fccf3fefb6d8c6abd7427fce3e2bb5015787b. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 03:11:57,970 p=10 u=root |  ...ignoring
2018-05-16 03:11:57,975 p=10 u=root |  TASK [baseliner : store facts] *************************************************
2018-05-16 03:11:57,975 p=10 u=root |  Wednesday 16 May 2018  03:11:57 +0000 (0:00:00.718)       0:00:05.614 ********* 
2018-05-16 03:11:58,020 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/store-facts.yml for node1, node2, node3
2018-05-16 03:11:58,034 p=10 u=root |  TASK [baseliner : install facter] **********************************************
2018-05-16 03:11:58,034 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.058)       0:00:05.673 ********* 
2018-05-16 03:11:58,064 p=10 u=root |  TASK [baseliner : create facts folder if it doesn't exist] *********************
2018-05-16 03:11:58,065 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.031)       0:00:05.704 ********* 
2018-05-16 03:11:58,171 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:11:58,182 p=10 u=root |  TASK [baseliner : store facts about remotes] ***********************************
2018-05-16 03:11:58,183 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.117)       0:00:05.822 ********* 
2018-05-16 03:11:58,570 p=10 u=root |  changed: [node1 -> localhost] => (item=node1)
2018-05-16 03:11:58,750 p=10 u=root |  changed: [node1 -> localhost] => (item=node2)
2018-05-16 03:11:58,934 p=10 u=root |  changed: [node1 -> localhost] => (item=node3)
2018-05-16 03:11:58,939 p=10 u=root |  TASK [baseliner : start monitoring] ********************************************
2018-05-16 03:11:58,939 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.756)       0:00:06.579 ********* 
2018-05-16 03:11:58,967 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-16 03:11:58,967 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.028)       0:00:06.607 ********* 
2018-05-16 03:11:58,997 p=10 u=root |  TASK [baseliner : get number of repetitions] ***********************************
2018-05-16 03:11:58,997 p=10 u=root |  Wednesday 16 May 2018  03:11:58 +0000 (0:00:00.029)       0:00:06.637 ********* 
2018-05-16 03:11:59,084 p=10 u=root |  ok: [node1] => (item=1)
2018-05-16 03:11:59,090 p=10 u=root |  ok: [node2] => (item=1)
2018-05-16 03:11:59,098 p=10 u=root |  ok: [node3] => (item=1)
2018-05-16 03:11:59,103 p=10 u=root |  TASK [baseliner : execute each benchmark] **************************************
2018-05-16 03:11:59,103 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.106)       0:00:06.743 ********* 
2018-05-16 03:11:59,154 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench.yml for node1, node2, node3
2018-05-16 03:11:59,196 p=10 u=root |  TASK [baseliner : upload files] ************************************************
2018-05-16 03:11:59,197 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.093)       0:00:06.836 ********* 
2018-05-16 03:11:59,225 p=10 u=root |  TASK [baseliner : initialize parameters and add number of repetitions] *********
2018-05-16 03:11:59,225 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.028)       0:00:06.865 ********* 
2018-05-16 03:11:59,279 p=10 u=root |  ok: [node1]
2018-05-16 03:11:59,286 p=10 u=root |  ok: [node2]
2018-05-16 03:11:59,292 p=10 u=root |  ok: [node3]
2018-05-16 03:11:59,296 p=10 u=root |  TASK [baseliner : unnest parameters when parameters for benchmark were passed] ***
2018-05-16 03:11:59,297 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.071)       0:00:06.936 ********* 
2018-05-16 03:11:59,327 p=10 u=root |  TASK [baseliner : parametrized execution] **************************************
2018-05-16 03:11:59,327 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.030)       0:00:06.967 ********* 
2018-05-16 03:11:59,395 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench-parametrized.yml for node1, node2, node3
2018-05-16 03:11:59,403 p=10 u=root |  TASK [baseliner : remove remote results folder] ********************************
2018-05-16 03:11:59,403 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.075)       0:00:07.043 ********* 
2018-05-16 03:11:59,584 p=10 u=root |  ok: [node2]
2018-05-16 03:11:59,587 p=10 u=root |  changed: [node1]
2018-05-16 03:11:59,599 p=10 u=root |  ok: [node3]
2018-05-16 03:11:59,605 p=10 u=root |  TASK [baseliner : create remote results folder] ********************************
2018-05-16 03:11:59,605 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.202)       0:00:07.245 ********* 
2018-05-16 03:11:59,783 p=10 u=root |  changed: [node1]
2018-05-16 03:11:59,796 p=10 u=root |  changed: [node2]
2018-05-16 03:11:59,809 p=10 u=root |  changed: [node3]
2018-05-16 03:11:59,815 p=10 u=root |  TASK [baseliner : initialize parameter dictionary] *****************************
2018-05-16 03:11:59,815 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.210)       0:00:07.455 ********* 
2018-05-16 03:11:59,865 p=10 u=root |  ok: [node1]
2018-05-16 03:11:59,872 p=10 u=root |  ok: [node2]
2018-05-16 03:11:59,882 p=10 u=root |  ok: [node3]
2018-05-16 03:11:59,887 p=10 u=root |  TASK [baseliner : populate parameter dictionary] *******************************
2018-05-16 03:11:59,887 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.071)       0:00:07.527 ********* 
2018-05-16 03:11:59,945 p=10 u=root |  ok: [node1] => (item=[u'repetition', u'1'])
2018-05-16 03:11:59,950 p=10 u=root |  ok: [node2] => (item=[u'repetition', u'1'])
2018-05-16 03:11:59,958 p=10 u=root |  ok: [node3] => (item=[u'repetition', u'1'])
2018-05-16 03:11:59,964 p=10 u=root |  TASK [baseliner : merge default variables to the benchmark-specific options] ***
2018-05-16 03:11:59,964 p=10 u=root |  Wednesday 16 May 2018  03:11:59 +0000 (0:00:00.077)       0:00:07.604 ********* 
2018-05-16 03:12:00,019 p=10 u=root |  ok: [node1]
2018-05-16 03:12:00,028 p=10 u=root |  ok: [node2]
2018-05-16 03:12:00,035 p=10 u=root |  ok: [node3]
2018-05-16 03:12:00,039 p=10 u=root |  TASK [baseliner : initialize string for path] **********************************
2018-05-16 03:12:00,040 p=10 u=root |  Wednesday 16 May 2018  03:12:00 +0000 (0:00:00.075)       0:00:07.679 ********* 
2018-05-16 03:12:00,093 p=10 u=root |  ok: [node1]
2018-05-16 03:12:00,106 p=10 u=root |  ok: [node2]
2018-05-16 03:12:00,112 p=10 u=root |  ok: [node3]
2018-05-16 03:12:00,117 p=10 u=root |  TASK [baseliner : add key/value pairs for each parameter (if any)] *************
2018-05-16 03:12:00,117 p=10 u=root |  Wednesday 16 May 2018  03:12:00 +0000 (0:00:00.077)       0:00:07.757 ********* 
2018-05-16 03:12:00,174 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:00,180 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:00,190 p=10 u=root |  ok: [node3] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:00,197 p=10 u=root |  TASK [baseliner : ensure output folder exists] *********************************
2018-05-16 03:12:00,197 p=10 u=root |  Wednesday 16 May 2018  03:12:00 +0000 (0:00:00.079)       0:00:07.837 ********* 
2018-05-16 03:12:00,330 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 03:12:00,334 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:12:00,340 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 03:12:00,346 p=10 u=root |  TASK [baseliner : run containerized benchmark] *********************************
2018-05-16 03:12:00,346 p=10 u=root |  Wednesday 16 May 2018  03:12:00 +0000 (0:00:00.148)       0:00:07.985 ********* 
2018-05-16 03:12:00,458 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-container.yml for node1, node2, node3
2018-05-16 03:12:00,478 p=10 u=root |  TASK [baseliner : check if image already exists] *******************************
2018-05-16 03:12:00,478 p=10 u=root |  Wednesday 16 May 2018  03:12:00 +0000 (0:00:00.132)       0:00:08.118 ********* 
2018-05-16 03:12:01,079 p=10 u=root |  changed: [node1]
2018-05-16 03:12:01,095 p=10 u=root |  changed: [node2]
2018-05-16 03:12:01,097 p=10 u=root |  changed: [node3]
2018-05-16 03:12:01,102 p=10 u=root |  TASK [baseliner : pull image] **************************************************
2018-05-16 03:12:01,102 p=10 u=root |  Wednesday 16 May 2018  03:12:01 +0000 (0:00:00.624)       0:00:08.742 ********* 
2018-05-16 03:12:02,570 p=10 u=root |  changed: [node1]
2018-05-16 03:12:02,572 p=10 u=root |  changed: [node2]
2018-05-16 03:12:02,684 p=10 u=root |  changed: [node3]
2018-05-16 03:12:02,690 p=10 u=root |  TASK [baseliner : define name of container] ************************************
2018-05-16 03:12:02,690 p=10 u=root |  Wednesday 16 May 2018  03:12:02 +0000 (0:00:01.587)       0:00:10.329 ********* 
2018-05-16 03:12:02,744 p=10 u=root |  ok: [node1]
2018-05-16 03:12:02,748 p=10 u=root |  ok: [node2]
2018-05-16 03:12:02,755 p=10 u=root |  ok: [node3]
2018-05-16 03:12:02,760 p=10 u=root |  TASK [baseliner : initialize docker_flags variable] ****************************
2018-05-16 03:12:02,760 p=10 u=root |  Wednesday 16 May 2018  03:12:02 +0000 (0:00:00.070)       0:00:10.400 ********* 
2018-05-16 03:12:02,811 p=10 u=root |  ok: [node1]
2018-05-16 03:12:02,833 p=10 u=root |  ok: [node2]
2018-05-16 03:12:02,839 p=10 u=root |  ok: [node3]
2018-05-16 03:12:02,846 p=10 u=root |  TASK [baseliner : add environment to docker_flags] *****************************
2018-05-16 03:12:02,846 p=10 u=root |  Wednesday 16 May 2018  03:12:02 +0000 (0:00:00.085)       0:00:10.486 ********* 
2018-05-16 03:12:02,877 p=10 u=root |  TASK [baseliner : add implicit environment from bench_params variable] *********
2018-05-16 03:12:02,877 p=10 u=root |  Wednesday 16 May 2018  03:12:02 +0000 (0:00:00.031)       0:00:10.517 ********* 
2018-05-16 03:12:02,931 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:02,943 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:02,950 p=10 u=root |  ok: [node3] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 03:12:02,956 p=10 u=root |  TASK [baseliner : check if we have host-specific ips] **************************
2018-05-16 03:12:02,956 p=10 u=root |  Wednesday 16 May 2018  03:12:02 +0000 (0:00:00.078)       0:00:10.595 ********* 
2018-05-16 03:12:03,008 p=10 u=root |  ok: [node1]
2018-05-16 03:12:03,015 p=10 u=root |  ok: [node2]
2018-05-16 03:12:03,023 p=10 u=root |  ok: [node3]
2018-05-16 03:12:03,028 p=10 u=root |  TASK [baseliner : add host-specific ips to docker_flags] ***********************
2018-05-16 03:12:03,028 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.072)       0:00:10.668 ********* 
2018-05-16 03:12:03,058 p=10 u=root |  TASK [baseliner : check if we have host-specific environment] ******************
2018-05-16 03:12:03,059 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.030)       0:00:10.698 ********* 
2018-05-16 03:12:03,110 p=10 u=root |  ok: [node1]
2018-05-16 03:12:03,117 p=10 u=root |  ok: [node2]
2018-05-16 03:12:03,125 p=10 u=root |  ok: [node3]
2018-05-16 03:12:03,130 p=10 u=root |  TASK [baseliner : add host-specific environment to docker_flags] ***************
2018-05-16 03:12:03,130 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.071)       0:00:10.770 ********* 
2018-05-16 03:12:03,187 p=10 u=root |  ok: [node1] => (item={'key': u'CEPH_NET', 'value': u'175.20.0.0/16'})
2018-05-16 03:12:03,194 p=10 u=root |  ok: [node2] => (item={'key': u'MONITOR_IP', 'value': None})
2018-05-16 03:12:03,202 p=10 u=root |  ok: [node3] => (item={'key': u'MONITOR_IP', 'value': None})
2018-05-16 03:12:03,225 p=10 u=root |  ok: [node1] => (item={'key': u'MONITOR', 'value': True})
2018-05-16 03:12:03,234 p=10 u=root |  ok: [node2] => (item={'key': u'CEPH_NET', 'value': u'175.20.0.0/16'})
2018-05-16 03:12:03,243 p=10 u=root |  ok: [node3] => (item={'key': u'CLIENT', 'value': True})
2018-05-16 03:12:03,272 p=10 u=root |  ok: [node2] => (item={'key': u'OSD', 'value': True})
2018-05-16 03:12:03,286 p=10 u=root |  ok: [node3] => (item={'key': u'CEPH_NET', 'value': u'175.20.0.0/16'})
2018-05-16 03:12:03,292 p=10 u=root |  TASK [baseliner : add devices to docker_flags] *********************************
2018-05-16 03:12:03,292 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.162)       0:00:10.932 ********* 
2018-05-16 03:12:03,326 p=10 u=root |  TASK [baseliner : add network mode to docker_flags] ****************************
2018-05-16 03:12:03,326 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.034)       0:00:10.966 ********* 
2018-05-16 03:12:03,379 p=10 u=root |  ok: [node1]
2018-05-16 03:12:03,387 p=10 u=root |  ok: [node2]
2018-05-16 03:12:03,396 p=10 u=root |  ok: [node3]
2018-05-16 03:12:03,401 p=10 u=root |  TASK [baseliner : add ipc mode to docker_flags] ********************************
2018-05-16 03:12:03,401 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.074)       0:00:11.041 ********* 
2018-05-16 03:12:03,436 p=10 u=root |  TASK [baseliner : add ports to docker_flags] ***********************************
2018-05-16 03:12:03,436 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.034)       0:00:11.076 ********* 
2018-05-16 03:12:03,467 p=10 u=root |  TASK [baseliner : add volumes to docker_flags] *********************************
2018-05-16 03:12:03,467 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.031)       0:00:11.107 ********* 
2018-05-16 03:12:03,495 p=10 u=root |  TASK [baseliner : add default volumes to docker_flags] *************************
2018-05-16 03:12:03,495 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.028)       0:00:11.135 ********* 
2018-05-16 03:12:03,552 p=10 u=root |  ok: [node2]
2018-05-16 03:12:03,562 p=10 u=root |  ok: [node3]
2018-05-16 03:12:03,575 p=10 u=root |  ok: [node1]
2018-05-16 03:12:03,580 p=10 u=root |  TASK [baseliner : set entrypoint] **********************************************
2018-05-16 03:12:03,580 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.085)       0:00:11.220 ********* 
2018-05-16 03:12:03,616 p=10 u=root |  TASK [baseliner : set limits] **************************************************
2018-05-16 03:12:03,617 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.036)       0:00:11.256 ********* 
2018-05-16 03:12:03,646 p=10 u=root |  TASK [baseliner : add capabilities] ********************************************
2018-05-16 03:12:03,646 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.029)       0:00:11.286 ********* 
2018-05-16 03:12:03,679 p=10 u=root |  TASK [baseliner : remove capabilities] *****************************************
2018-05-16 03:12:03,679 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.033)       0:00:11.319 ********* 
2018-05-16 03:12:03,711 p=10 u=root |  TASK [baseliner : set privileged mode] *****************************************
2018-05-16 03:12:03,711 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.031)       0:00:11.351 ********* 
2018-05-16 03:12:03,741 p=10 u=root |  TASK [baseliner : set memory constraint] ***************************************
2018-05-16 03:12:03,742 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.030)       0:00:11.381 ********* 
2018-05-16 03:12:03,775 p=10 u=root |  TASK [baseliner : set memory-swap constraint] **********************************
2018-05-16 03:12:03,776 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.033)       0:00:11.415 ********* 
2018-05-16 03:12:03,806 p=10 u=root |  TASK [baseliner : set parent cgroup] *******************************************
2018-05-16 03:12:03,806 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.030)       0:00:11.446 ********* 
2018-05-16 03:12:03,837 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 03:12:03,837 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.031)       0:00:11.477 ********* 
2018-05-16 03:12:03,892 p=10 u=root |  ok: [node1] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e CEPH_NET=\"175.20.0.0/16\" -e MONITOR=\"True\" --net=ceph_net -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 03:12:03,899 p=10 u=root |  ok: [node2] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e MONITOR_IP=\"\" -e CEPH_NET=\"175.20.0.0/16\" -e OSD=\"True\" --net=ceph_net -v /tmp/baseliner_output_node2:/results -v /tmp/baseliner_output_node2:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 03:12:03,910 p=10 u=root |  ok: [node3] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e MONITOR_IP=\"\" -e CLIENT=\"True\" -e CEPH_NET=\"175.20.0.0/16\" --net=ceph_net -v /tmp/baseliner_output_node3:/results -v /tmp/baseliner_output_node3:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 03:12:03,915 p=10 u=root |  TASK [baseliner : run container] ***********************************************
2018-05-16 03:12:03,915 p=10 u=root |  Wednesday 16 May 2018  03:12:03 +0000 (0:00:00.077)       0:00:11.555 ********* 
2018-05-16 03:12:05,062 p=10 u=root |  changed: [node1]
2018-05-16 03:12:05,067 p=10 u=root |  changed: [node2]
2018-05-16 03:12:05,078 p=10 u=root |  changed: [node3]
2018-05-16 03:12:05,088 p=10 u=root |  TASK [baseliner : wait for containers in parallel mode and stop/kill them if they timeout] ***
2018-05-16 03:12:05,088 p=10 u=root |  Wednesday 16 May 2018  03:12:05 +0000 (0:00:01.173)       0:00:12.728 ********* 
2018-05-16 03:12:05,106 p=10 u=root |  TASK [baseliner : wait for containers in single-node mode and stop/kill them if they timeout] ***
2018-05-16 03:12:05,106 p=10 u=root |  Wednesday 16 May 2018  03:12:05 +0000 (0:00:00.018)       0:00:12.746 ********* 
2018-05-16 03:13:10,279 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:13:10,287 p=10 u=root |  TASK [baseliner : get wait result] *********************************************
2018-05-16 03:13:10,287 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:01:05.180)       0:01:17.927 ********* 
2018-05-16 03:13:10,308 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 03:13:10,318 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 03:13:10,318 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:00:00.030)       0:01:17.958 ********* 
2018-05-16 03:13:10,337 p=10 u=root |  ok: [node1 -> localhost] => {
    "msg": "WAIT_FOR_RESULT:  3 hosts finished running their containers"
}
2018-05-16 03:13:10,343 p=10 u=root |  TASK [baseliner : get result of container execution] ***************************
2018-05-16 03:13:10,343 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:00:00.025)       0:01:17.983 ********* 
2018-05-16 03:13:10,631 p=10 u=root |  fatal: [node3]: FAILED! => {"ansible_job_id": "896613908020.175", "changed": true, "cmd": "docker run --rm --name baseliner_node3  -e repetition=\"1\" -e MONITOR_IP=\"\" -e CLIENT=\"True\" -e CEPH_NET=\"175.20.0.0/16\" --net=ceph_net -v /tmp/baseliner_output_node3:/results -v /tmp/baseliner_output_node3:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.251691", "end": "2018-05-16 03:12:05.390117", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 125, "start": "2018-05-16 03:12:04.138426", "stderr": "Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally\ndocker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.\nSee 'docker run --help'.", "stderr_lines": ["Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally", "docker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.", "See 'docker run --help'."], "stdout": "", "stdout_lines": []}
2018-05-16 03:13:10,631 p=10 u=root |  ...ignoring
2018-05-16 03:13:10,641 p=10 u=root |  fatal: [node2]: FAILED! => {"ansible_job_id": "161427560525.170", "changed": true, "cmd": "docker run --rm --name baseliner_node2  -e repetition=\"1\" -e MONITOR_IP=\"\" -e CEPH_NET=\"175.20.0.0/16\" -e OSD=\"True\" --net=ceph_net -v /tmp/baseliner_output_node2:/results -v /tmp/baseliner_output_node2:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.398945", "end": "2018-05-16 03:12:05.513885", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 125, "start": "2018-05-16 03:12:04.114940", "stderr": "Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally\ndocker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.\nSee 'docker run --help'.", "stderr_lines": ["Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally", "docker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.", "See 'docker run --help'."], "stdout": "", "stdout_lines": []}
2018-05-16 03:13:10,641 p=10 u=root |  ...ignoring
2018-05-16 03:13:10,642 p=10 u=root |  fatal: [node1]: FAILED! => {"ansible_job_id": "738952465836.177", "changed": true, "cmd": "docker run --rm --name baseliner_node1  -e repetition=\"1\" -e CEPH_NET=\"175.20.0.0/16\" -e MONITOR=\"True\" --net=ceph_net -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.262773", "end": "2018-05-16 03:12:05.384620", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 125, "start": "2018-05-16 03:12:04.121847", "stderr": "Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally\ndocker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.\nSee 'docker run --help'.", "stderr_lines": ["Unable to find image 'rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64' locally", "docker: Error response from daemon: pull access denied for rados_bench, repository does not exist or may require 'docker login'.", "See 'docker run --help'."], "stdout": "", "stdout_lines": []}
2018-05-16 03:13:10,642 p=10 u=root |  ...ignoring
2018-05-16 03:13:10,650 p=10 u=root |  TASK [baseliner : set fact to store result of bench execution] *****************
2018-05-16 03:13:10,650 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:00:00.306)       0:01:18.289 ********* 
2018-05-16 03:13:10,667 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 03:13:10,674 p=10 u=root |  TASK [baseliner : record elapsed time in output folder] ************************
2018-05-16 03:13:10,674 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:00:00.024)       0:01:18.314 ********* 
2018-05-16 03:13:10,884 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:13:10,892 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 03:13:10,904 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 03:13:10,911 p=10 u=root |  TASK [baseliner : capture stdout] **********************************************
2018-05-16 03:13:10,911 p=10 u=root |  Wednesday 16 May 2018  03:13:10 +0000 (0:00:00.236)       0:01:18.551 ********* 
2018-05-16 03:13:11,132 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 03:13:11,140 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:13:11,172 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 03:13:11,180 p=10 u=root |  TASK [baseliner : capture stderr] **********************************************
2018-05-16 03:13:11,180 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.268)       0:01:18.819 ********* 
2018-05-16 03:13:11,394 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 03:13:11,413 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 03:13:11,420 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 03:13:11,426 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 03:13:11,426 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.246)       0:01:19.066 ********* 
2018-05-16 03:13:11,481 p=10 u=root |  ok: [node1] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-16 03:13:11,491 p=10 u=root |  ok: [node2] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-16 03:13:11,497 p=10 u=root |  ok: [node3] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-16 03:13:11,501 p=10 u=root |  TASK [baseliner : run compose benchmark] ***************************************
2018-05-16 03:13:11,502 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.075)       0:01:19.141 ********* 
2018-05-16 03:13:11,530 p=10 u=root |  TASK [baseliner : run script benchmark] ****************************************
2018-05-16 03:13:11,530 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.028)       0:01:19.170 ********* 
2018-05-16 03:13:11,558 p=10 u=root |  TASK [baseliner : download results] ********************************************
2018-05-16 03:13:11,558 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.028)       0:01:19.198 ********* 
2018-05-16 03:13:11,603 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/download-output.yml for node1, node2, node3
2018-05-16 03:13:11,657 p=10 u=root |  TASK [baseliner : get any bench-specific files] ********************************
2018-05-16 03:13:11,657 p=10 u=root |  Wednesday 16 May 2018  03:13:11 +0000 (0:00:00.098)       0:01:19.297 ********* 
2018-05-16 03:13:12,493 p=10 u=root |  changed: [node3] => (item=/tmp/baseliner_output_node3)
2018-05-16 03:13:12,533 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-16 03:13:12,533 p=10 u=root |  changed: [node2] => (item=/tmp/baseliner_output_node2)
2018-05-16 03:13:12,538 p=10 u=root |  TASK [baseliner : delete remote folder after transfer] *************************
2018-05-16 03:13:12,538 p=10 u=root |  Wednesday 16 May 2018  03:13:12 +0000 (0:00:00.881)       0:01:20.178 ********* 
2018-05-16 03:13:12,729 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-16 03:13:12,736 p=10 u=root |  changed: [node2] => (item=/tmp/baseliner_output_node2)
2018-05-16 03:13:12,745 p=10 u=root |  changed: [node3] => (item=/tmp/baseliner_output_node3)
2018-05-16 03:13:12,751 p=10 u=root |  TASK [baseliner : check if we should fail fast] ********************************
2018-05-16 03:13:12,751 p=10 u=root |  Wednesday 16 May 2018  03:13:12 +0000 (0:00:00.212)       0:01:20.391 ********* 
2018-05-16 03:13:12,798 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/fail-fast.yml for node1, node2, node3
2018-05-16 03:13:12,891 p=10 u=root |  TASK [baseliner : failfast for single-node mode] *******************************
2018-05-16 03:13:12,891 p=10 u=root |  Wednesday 16 May 2018  03:13:12 +0000 (0:00:00.140)       0:01:20.531 ********* 
2018-05-16 03:13:12,946 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": false, "failed": true, "msg": "benchmark failed"}
2018-05-16 03:13:12,947 p=10 u=root |  NO MORE HOSTS LEFT *************************************************************
2018-05-16 03:13:12,948 p=10 u=root |  PLAY RECAP *********************************************************************
2018-05-16 03:13:12,948 p=10 u=root |  node1                      : ok=47   changed=16   unreachable=0    failed=1   
2018-05-16 03:13:12,948 p=10 u=root |  node2                      : ok=40   changed=12   unreachable=0    failed=0   
2018-05-16 03:13:12,948 p=10 u=root |  node3                      : ok=40   changed=12   unreachable=0    failed=0   
2018-05-16 03:13:12,948 p=10 u=root |  Wednesday 16 May 2018  03:13:12 +0000 (0:00:00.056)       0:01:20.588 ********* 
2018-05-16 03:13:12,948 p=10 u=root |  =============================================================================== 
2018-05-16 03:13:12,948 p=10 u=root |  baseliner : wait for containers in single-node mode and stop/kill them if they timeout -- 65.18s
2018-05-16 03:13:12,948 p=10 u=root |  Gathering Facts --------------------------------------------------------- 4.26s
2018-05-16 03:13:12,948 p=10 u=root |  baseliner : pull image -------------------------------------------------- 1.59s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : run container ----------------------------------------------- 1.17s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : get any bench-specific files -------------------------------- 0.88s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : store facts about remotes ----------------------------------- 0.76s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : remove containers to avoid name clashes --------------------- 0.72s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : check if image already exists ------------------------------- 0.62s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : get result of container execution --------------------------- 0.31s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : capture stdout ---------------------------------------------- 0.27s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : capture stderr ---------------------------------------------- 0.25s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : record elapsed time in output folder ------------------------ 0.24s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : ensure results folder exists -------------------------------- 0.22s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : delete remote folder after transfer ------------------------- 0.21s
2018-05-16 03:13:12,949 p=10 u=root |  baseliner : create remote results folder -------------------------------- 0.21s
2018-05-16 03:13:12,950 p=10 u=root |  baseliner : remove remote results folder -------------------------------- 0.20s
2018-05-16 03:13:12,950 p=10 u=root |  baseliner : add host-specific environment to docker_flags --------------- 0.16s
2018-05-16 03:13:12,950 p=10 u=root |  baseliner : ensure output folder exists --------------------------------- 0.15s
2018-05-16 03:13:12,950 p=10 u=root |  baseliner : check if we should fail fast -------------------------------- 0.14s
2018-05-16 03:13:12,950 p=10 u=root |  baseliner : run containerized benchmark --------------------------------- 0.13s
2018-05-16 03:13:12,950 p=10 u=root |  Playbook run took 0 days, 0 hours, 1 minutes, 20 seconds
