
2018-05-16 18:42:05,952 p=10 u=root |  PLAY [all] *********************************************************************
2018-05-16 18:42:05,958 p=10 u=root |  TASK [Gathering Facts] *********************************************************
2018-05-16 18:42:05,958 p=10 u=root |  Wednesday 16 May 2018  18:42:05 +0000 (0:00:00.042)       0:00:00.042 ********* 
2018-05-16 18:42:10,201 p=10 u=root |  ok: [node2]
2018-05-16 18:42:10,202 p=10 u=root |  ok: [node3]
2018-05-16 18:42:10,204 p=10 u=root |  ok: [node1]
2018-05-16 18:42:10,208 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-16 18:42:10,208 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:04.249)       0:00:04.291 ********* 
2018-05-16 18:42:10,261 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/check_preconditions.yml for node1, node2, node3
2018-05-16 18:42:10,269 p=10 u=root |  TASK [baseliner : ensure expected variables are defined] ***********************
2018-05-16 18:42:10,269 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.061)       0:00:04.352 ********* 
2018-05-16 18:42:10,327 p=10 u=root |  ok: [node1] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 18:42:10,334 p=10 u=root |  ok: [node2] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 18:42:10,341 p=10 u=root |  ok: [node3] => {
    "changed": false, 
    "failed": false, 
    "msg": "All assertions passed"
}
2018-05-16 18:42:10,347 p=10 u=root |  TASK [baseliner : set remote results path if not defined] **********************
2018-05-16 18:42:10,347 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.077)       0:00:04.430 ********* 
2018-05-16 18:42:10,413 p=10 u=root |  ok: [node1]
2018-05-16 18:42:10,418 p=10 u=root |  ok: [node2]
2018-05-16 18:42:10,429 p=10 u=root |  ok: [node3]
2018-05-16 18:42:10,436 p=10 u=root |  TASK [baseliner : ensure results folder exists] ********************************
2018-05-16 18:42:10,436 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.089)       0:00:04.520 ********* 
2018-05-16 18:42:10,654 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 18:42:10,662 p=10 u=root |  TASK [baseliner : check that pre-tasks file exists] ****************************
2018-05-16 18:42:10,662 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.225)       0:00:04.745 ********* 
2018-05-16 18:42:10,681 p=10 u=root |  TASK [baseliner : check that post-tasks file exists] ***************************
2018-05-16 18:42:10,681 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.019)       0:00:04.764 ********* 
2018-05-16 18:42:10,714 p=10 u=root |  TASK [baseliner : ensure docker-engine is installed] ***************************
2018-05-16 18:42:10,714 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.032)       0:00:04.797 ********* 
2018-05-16 18:42:10,745 p=10 u=root |  TASK [baseliner : install statically linked docker] ****************************
2018-05-16 18:42:10,746 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.031)       0:00:04.829 ********* 
2018-05-16 18:42:10,782 p=10 u=root |  TASK [baseliner : ensure the docker daemon is running] *************************
2018-05-16 18:42:10,782 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.036)       0:00:04.865 ********* 
2018-05-16 18:42:10,814 p=10 u=root |  TASK [baseliner : stop any running container] **********************************
2018-05-16 18:42:10,814 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.032)       0:00:04.897 ********* 
2018-05-16 18:42:10,844 p=10 u=root |  TASK [baseliner : remove containers to avoid name clashes] *********************
2018-05-16 18:42:10,844 p=10 u=root |  Wednesday 16 May 2018  18:42:10 +0000 (0:00:00.029)       0:00:04.927 ********* 
2018-05-16 18:42:11,574 p=10 u=root |  fatal: [node2]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.442627", "end": "2018-05-16 18:42:11.557215", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 18:42:11.114588", "stderr": "Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 18:42:11,575 p=10 u=root |  ...ignoring
2018-05-16 18:42:11,582 p=10 u=root |  fatal: [node3]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.436577", "end": "2018-05-16 18:42:11.566998", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 18:42:11.130421", "stderr": "Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 18:42:11,582 p=10 u=root |  ...ignoring
2018-05-16 18:42:11,582 p=10 u=root |  fatal: [node1]: FAILED! => {"changed": true, "cmd": "docker rm `docker ps -qa`", "delta": "0:00:00.442320", "end": "2018-05-16 18:42:11.566542", "failed": true, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 18:42:11.124222", "stderr": "Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove\nError response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove", "stderr_lines": ["Error response from daemon: You cannot remove a running container beb83a7924a00c87f2ad02ea0d08a8c053ef8b5478b0d14afd448a895646ae4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container 332f51fd41140a0408e8b38bd5d6cab33f8f8a43ddc2d98c102ba5a7bed4eb4f. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container c6013bb2474728ee60d183d6f1b71943e55e81a163738d3aec324a3656ff88cb. Stop the container before attempting removal or force remove", "Error response from daemon: You cannot remove a running container a10d154e4ed080e16f2306d4e66f68498f18ee417f76b1487884ff84cdabafb6. Stop the container before attempting removal or force remove"], "stdout": "", "stdout_lines": []}
2018-05-16 18:42:11,582 p=10 u=root |  ...ignoring
2018-05-16 18:42:11,587 p=10 u=root |  TASK [baseliner : store facts] *************************************************
2018-05-16 18:42:11,587 p=10 u=root |  Wednesday 16 May 2018  18:42:11 +0000 (0:00:00.743)       0:00:05.670 ********* 
2018-05-16 18:42:11,637 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/store-facts.yml for node1, node2, node3
2018-05-16 18:42:11,651 p=10 u=root |  TASK [baseliner : install facter] **********************************************
2018-05-16 18:42:11,651 p=10 u=root |  Wednesday 16 May 2018  18:42:11 +0000 (0:00:00.064)       0:00:05.734 ********* 
2018-05-16 18:42:11,685 p=10 u=root |  TASK [baseliner : create facts folder if it doesn't exist] *********************
2018-05-16 18:42:11,685 p=10 u=root |  Wednesday 16 May 2018  18:42:11 +0000 (0:00:00.033)       0:00:05.768 ********* 
2018-05-16 18:42:11,815 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:42:11,824 p=10 u=root |  TASK [baseliner : store facts about remotes] ***********************************
2018-05-16 18:42:11,824 p=10 u=root |  Wednesday 16 May 2018  18:42:11 +0000 (0:00:00.138)       0:00:05.907 ********* 
2018-05-16 18:42:12,211 p=10 u=root |  changed: [node1 -> localhost] => (item=node1)
2018-05-16 18:42:12,405 p=10 u=root |  changed: [node1 -> localhost] => (item=node2)
2018-05-16 18:42:12,586 p=10 u=root |  changed: [node1 -> localhost] => (item=node3)
2018-05-16 18:42:12,591 p=10 u=root |  TASK [baseliner : start monitoring] ********************************************
2018-05-16 18:42:12,592 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.767)       0:00:06.675 ********* 
2018-05-16 18:42:12,621 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-16 18:42:12,621 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.029)       0:00:06.704 ********* 
2018-05-16 18:42:12,649 p=10 u=root |  TASK [baseliner : get number of repetitions] ***********************************
2018-05-16 18:42:12,650 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.028)       0:00:06.733 ********* 
2018-05-16 18:42:12,739 p=10 u=root |  ok: [node1] => (item=1)
2018-05-16 18:42:12,744 p=10 u=root |  ok: [node2] => (item=1)
2018-05-16 18:42:12,754 p=10 u=root |  ok: [node3] => (item=1)
2018-05-16 18:42:12,759 p=10 u=root |  TASK [baseliner : execute each benchmark] **************************************
2018-05-16 18:42:12,759 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.109)       0:00:06.842 ********* 
2018-05-16 18:42:12,811 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench.yml for node1, node2, node3
2018-05-16 18:42:12,856 p=10 u=root |  TASK [baseliner : upload files] ************************************************
2018-05-16 18:42:12,857 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.097)       0:00:06.940 ********* 
2018-05-16 18:42:12,885 p=10 u=root |  TASK [baseliner : initialize parameters and add number of repetitions] *********
2018-05-16 18:42:12,886 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.028)       0:00:06.969 ********* 
2018-05-16 18:42:12,937 p=10 u=root |  ok: [node1]
2018-05-16 18:42:12,945 p=10 u=root |  ok: [node2]
2018-05-16 18:42:12,961 p=10 u=root |  ok: [node3]
2018-05-16 18:42:12,966 p=10 u=root |  TASK [baseliner : unnest parameters when parameters for benchmark were passed] ***
2018-05-16 18:42:12,966 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.080)       0:00:07.050 ********* 
2018-05-16 18:42:12,997 p=10 u=root |  TASK [baseliner : parametrized execution] **************************************
2018-05-16 18:42:12,998 p=10 u=root |  Wednesday 16 May 2018  18:42:12 +0000 (0:00:00.031)       0:00:07.081 ********* 
2018-05-16 18:42:13,072 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-bench-parametrized.yml for node1, node2, node3
2018-05-16 18:42:13,079 p=10 u=root |  TASK [baseliner : remove remote results folder] ********************************
2018-05-16 18:42:13,079 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.081)       0:00:07.163 ********* 
2018-05-16 18:42:13,267 p=10 u=root |  changed: [node1]
2018-05-16 18:42:13,309 p=10 u=root |  changed: [node2]
2018-05-16 18:42:13,317 p=10 u=root |  changed: [node3]
2018-05-16 18:42:13,321 p=10 u=root |  TASK [baseliner : create remote results folder] ********************************
2018-05-16 18:42:13,321 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.241)       0:00:07.405 ********* 
2018-05-16 18:42:13,503 p=10 u=root |  changed: [node1]
2018-05-16 18:42:13,513 p=10 u=root |  changed: [node2]
2018-05-16 18:42:13,530 p=10 u=root |  changed: [node3]
2018-05-16 18:42:13,535 p=10 u=root |  TASK [baseliner : initialize parameter dictionary] *****************************
2018-05-16 18:42:13,535 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.213)       0:00:07.618 ********* 
2018-05-16 18:42:13,586 p=10 u=root |  ok: [node1]
2018-05-16 18:42:13,620 p=10 u=root |  ok: [node2]
2018-05-16 18:42:13,625 p=10 u=root |  ok: [node3]
2018-05-16 18:42:13,632 p=10 u=root |  TASK [baseliner : populate parameter dictionary] *******************************
2018-05-16 18:42:13,633 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.097)       0:00:07.716 ********* 
2018-05-16 18:42:13,690 p=10 u=root |  ok: [node1] => (item=[u'repetition', u'1'])
2018-05-16 18:42:13,699 p=10 u=root |  ok: [node2] => (item=[u'repetition', u'1'])
2018-05-16 18:42:13,707 p=10 u=root |  ok: [node3] => (item=[u'repetition', u'1'])
2018-05-16 18:42:13,712 p=10 u=root |  TASK [baseliner : merge default variables to the benchmark-specific options] ***
2018-05-16 18:42:13,712 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.079)       0:00:07.795 ********* 
2018-05-16 18:42:13,765 p=10 u=root |  ok: [node1]
2018-05-16 18:42:13,771 p=10 u=root |  ok: [node2]
2018-05-16 18:42:13,780 p=10 u=root |  ok: [node3]
2018-05-16 18:42:13,786 p=10 u=root |  TASK [baseliner : initialize string for path] **********************************
2018-05-16 18:42:13,786 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.073)       0:00:07.869 ********* 
2018-05-16 18:42:13,843 p=10 u=root |  ok: [node1]
2018-05-16 18:42:13,848 p=10 u=root |  ok: [node2]
2018-05-16 18:42:13,859 p=10 u=root |  ok: [node3]
2018-05-16 18:42:13,865 p=10 u=root |  TASK [baseliner : add key/value pairs for each parameter (if any)] *************
2018-05-16 18:42:13,865 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.078)       0:00:07.948 ********* 
2018-05-16 18:42:13,923 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:13,929 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:13,937 p=10 u=root |  ok: [node3] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:13,943 p=10 u=root |  TASK [baseliner : ensure output folder exists] *********************************
2018-05-16 18:42:13,943 p=10 u=root |  Wednesday 16 May 2018  18:42:13 +0000 (0:00:00.078)       0:00:08.027 ********* 
2018-05-16 18:42:14,071 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:42:14,082 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 18:42:14,089 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 18:42:14,094 p=10 u=root |  TASK [baseliner : run containerized benchmark] *********************************
2018-05-16 18:42:14,094 p=10 u=root |  Wednesday 16 May 2018  18:42:14 +0000 (0:00:00.150)       0:00:08.177 ********* 
2018-05-16 18:42:14,213 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/run-container.yml for node1, node2, node3
2018-05-16 18:42:14,231 p=10 u=root |  TASK [baseliner : check if image already exists] *******************************
2018-05-16 18:42:14,232 p=10 u=root |  Wednesday 16 May 2018  18:42:14 +0000 (0:00:00.137)       0:00:08.315 ********* 
2018-05-16 18:42:14,833 p=10 u=root |  changed: [node1]
2018-05-16 18:42:14,840 p=10 u=root |  changed: [node2]
2018-05-16 18:42:14,865 p=10 u=root |  changed: [node3]
2018-05-16 18:42:14,873 p=10 u=root |  TASK [baseliner : pull image] **************************************************
2018-05-16 18:42:14,873 p=10 u=root |  Wednesday 16 May 2018  18:42:14 +0000 (0:00:00.641)       0:00:08.956 ********* 
2018-05-16 18:42:16,306 p=10 u=root |  changed: [node2]
2018-05-16 18:42:16,313 p=10 u=root |  changed: [node3]
2018-05-16 18:42:16,314 p=10 u=root |  changed: [node1]
2018-05-16 18:42:16,318 p=10 u=root |  TASK [baseliner : define name of container] ************************************
2018-05-16 18:42:16,319 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:01.445)       0:00:10.402 ********* 
2018-05-16 18:42:16,372 p=10 u=root |  ok: [node1]
2018-05-16 18:42:16,387 p=10 u=root |  ok: [node3]
2018-05-16 18:42:16,393 p=10 u=root |  ok: [node2]
2018-05-16 18:42:16,398 p=10 u=root |  TASK [baseliner : initialize docker_flags variable] ****************************
2018-05-16 18:42:16,398 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.079)       0:00:10.481 ********* 
2018-05-16 18:42:16,451 p=10 u=root |  ok: [node1]
2018-05-16 18:42:16,459 p=10 u=root |  ok: [node2]
2018-05-16 18:42:16,466 p=10 u=root |  ok: [node3]
2018-05-16 18:42:16,474 p=10 u=root |  TASK [baseliner : add environment to docker_flags] *****************************
2018-05-16 18:42:16,475 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.076)       0:00:10.558 ********* 
2018-05-16 18:42:16,504 p=10 u=root |  TASK [baseliner : add implicit environment from bench_params variable] *********
2018-05-16 18:42:16,505 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.029)       0:00:10.588 ********* 
2018-05-16 18:42:16,559 p=10 u=root |  ok: [node1] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:16,573 p=10 u=root |  ok: [node3] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:16,588 p=10 u=root |  ok: [node2] => (item={'key': u'repetition', 'value': u'1'})
2018-05-16 18:42:16,594 p=10 u=root |  TASK [baseliner : check if we have host-specific ips] **************************
2018-05-16 18:42:16,594 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.089)       0:00:10.677 ********* 
2018-05-16 18:42:16,645 p=10 u=root |  ok: [node1]
2018-05-16 18:42:16,653 p=10 u=root |  ok: [node2]
2018-05-16 18:42:16,664 p=10 u=root |  ok: [node3]
2018-05-16 18:42:16,670 p=10 u=root |  TASK [baseliner : add host-specific ips to docker_flags] ***********************
2018-05-16 18:42:16,670 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.076)       0:00:10.753 ********* 
2018-05-16 18:42:16,703 p=10 u=root |  TASK [baseliner : check if we have host-specific environment] ******************
2018-05-16 18:42:16,703 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.033)       0:00:10.786 ********* 
2018-05-16 18:42:16,761 p=10 u=root |  ok: [node1]
2018-05-16 18:42:16,778 p=10 u=root |  ok: [node2]
2018-05-16 18:42:16,788 p=10 u=root |  ok: [node3]
2018-05-16 18:42:16,795 p=10 u=root |  TASK [baseliner : add host-specific environment to docker_flags] ***************
2018-05-16 18:42:16,795 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.092)       0:00:10.878 ********* 
2018-05-16 18:42:16,859 p=10 u=root |  ok: [node1] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'175.20.0.0/16'})
2018-05-16 18:42:16,879 p=10 u=root |  ok: [node2] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'175.20.0.0/16'})
2018-05-16 18:42:16,889 p=10 u=root |  ok: [node3] => (item={'key': u'CEPH_PUBLIC_NETWORK', 'value': u'175.20.0.0/16'})
2018-05-16 18:42:16,898 p=10 u=root |  ok: [node1] => (item={'key': u'MON_IP', 'value': u'175.20.0.12'})
2018-05-16 18:42:16,919 p=10 u=root |  ok: [node2] => (item={'key': u'MON_IP', 'value': u'175.20.0.12'})
2018-05-16 18:42:16,935 p=10 u=root |  ok: [node1] => (item={'key': u'MONITOR', 'value': True})
2018-05-16 18:42:16,946 p=10 u=root |  ok: [node3] => (item={'key': u'CLIENT', 'value': True})
2018-05-16 18:42:16,957 p=10 u=root |  ok: [node2] => (item={'key': u'OSD', 'value': True})
2018-05-16 18:42:16,991 p=10 u=root |  ok: [node3] => (item={'key': u'MON_IP', 'value': u'175.20.0.12'})
2018-05-16 18:42:16,995 p=10 u=root |  TASK [baseliner : add devices to docker_flags] *********************************
2018-05-16 18:42:16,996 p=10 u=root |  Wednesday 16 May 2018  18:42:16 +0000 (0:00:00.200)       0:00:11.079 ********* 
2018-05-16 18:42:17,028 p=10 u=root |  TASK [baseliner : add network mode to docker_flags] ****************************
2018-05-16 18:42:17,028 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.032)       0:00:11.111 ********* 
2018-05-16 18:42:17,100 p=10 u=root |  ok: [node1]
2018-05-16 18:42:17,136 p=10 u=root |  ok: [node2]
2018-05-16 18:42:17,145 p=10 u=root |  ok: [node3]
2018-05-16 18:42:17,151 p=10 u=root |  TASK [baseliner : add ipc mode to docker_flags] ********************************
2018-05-16 18:42:17,151 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.123)       0:00:11.235 ********* 
2018-05-16 18:42:17,198 p=10 u=root |  TASK [baseliner : add ports to docker_flags] ***********************************
2018-05-16 18:42:17,199 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.047)       0:00:11.282 ********* 
2018-05-16 18:42:17,244 p=10 u=root |  TASK [baseliner : add volumes to docker_flags] *********************************
2018-05-16 18:42:17,244 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.045)       0:00:11.327 ********* 
2018-05-16 18:42:17,276 p=10 u=root |  TASK [baseliner : add default volumes to docker_flags] *************************
2018-05-16 18:42:17,277 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.032)       0:00:11.360 ********* 
2018-05-16 18:42:17,332 p=10 u=root |  ok: [node1]
2018-05-16 18:42:17,339 p=10 u=root |  ok: [node2]
2018-05-16 18:42:17,355 p=10 u=root |  ok: [node3]
2018-05-16 18:42:17,360 p=10 u=root |  TASK [baseliner : set entrypoint] **********************************************
2018-05-16 18:42:17,360 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.083)       0:00:11.444 ********* 
2018-05-16 18:42:17,390 p=10 u=root |  TASK [baseliner : set limits] **************************************************
2018-05-16 18:42:17,391 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.030)       0:00:11.474 ********* 
2018-05-16 18:42:17,420 p=10 u=root |  TASK [baseliner : add capabilities] ********************************************
2018-05-16 18:42:17,420 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.029)       0:00:11.504 ********* 
2018-05-16 18:42:17,453 p=10 u=root |  TASK [baseliner : remove capabilities] *****************************************
2018-05-16 18:42:17,454 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.033)       0:00:11.537 ********* 
2018-05-16 18:42:17,489 p=10 u=root |  TASK [baseliner : set privileged mode] *****************************************
2018-05-16 18:42:17,489 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.035)       0:00:11.572 ********* 
2018-05-16 18:42:17,526 p=10 u=root |  TASK [baseliner : set memory constraint] ***************************************
2018-05-16 18:42:17,526 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.037)       0:00:11.609 ********* 
2018-05-16 18:42:17,560 p=10 u=root |  TASK [baseliner : set memory-swap constraint] **********************************
2018-05-16 18:42:17,560 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.034)       0:00:11.643 ********* 
2018-05-16 18:42:17,598 p=10 u=root |  TASK [baseliner : set parent cgroup] *******************************************
2018-05-16 18:42:17,598 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.037)       0:00:11.681 ********* 
2018-05-16 18:42:17,628 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 18:42:17,628 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.029)       0:00:11.711 ********* 
2018-05-16 18:42:17,682 p=10 u=root |  ok: [node1] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"175.20.0.0/16\" -e MON_IP=\"175.20.0.12\" -e MONITOR=\"True\" --net=cephnet -v /tmp/baseliner_output_node1:/results -v /tmp/baseliner_output_node1:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 18:42:17,689 p=10 u=root |  ok: [node2] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"175.20.0.0/16\" -e MON_IP=\"175.20.0.12\" -e OSD=\"True\" --net=cephnet -v /tmp/baseliner_output_node2:/results -v /tmp/baseliner_output_node2:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 18:42:17,696 p=10 u=root |  ok: [node3] => {
    "msg": "docker run --rm  -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"175.20.0.0/16\" -e CLIENT=\"True\" -e MON_IP=\"175.20.0.12\" --net=cephnet -v /tmp/baseliner_output_node3:/results -v /tmp/baseliner_output_node3:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 "
}
2018-05-16 18:42:17,702 p=10 u=root |  TASK [baseliner : run container] ***********************************************
2018-05-16 18:42:17,702 p=10 u=root |  Wednesday 16 May 2018  18:42:17 +0000 (0:00:00.074)       0:00:11.785 ********* 
2018-05-16 18:42:18,844 p=10 u=root |  changed: [node1]
2018-05-16 18:42:18,862 p=10 u=root |  changed: [node2]
2018-05-16 18:42:18,872 p=10 u=root |  changed: [node3]
2018-05-16 18:42:18,882 p=10 u=root |  TASK [baseliner : wait for containers in parallel mode and stop/kill them if they timeout] ***
2018-05-16 18:42:18,882 p=10 u=root |  Wednesday 16 May 2018  18:42:18 +0000 (0:00:01.180)       0:00:12.965 ********* 
2018-05-16 18:42:18,909 p=10 u=root |  TASK [baseliner : wait for containers in single-node mode and stop/kill them if they timeout] ***
2018-05-16 18:42:18,910 p=10 u=root |  Wednesday 16 May 2018  18:42:18 +0000 (0:00:00.027)       0:00:12.993 ********* 
2018-05-16 18:47:31,041 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:47:31,048 p=10 u=root |  TASK [baseliner : get wait result] *********************************************
2018-05-16 18:47:31,048 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:05:12.138)       0:05:25.131 ********* 
2018-05-16 18:47:31,069 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 18:47:31,075 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 18:47:31,075 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.027)       0:05:25.158 ********* 
2018-05-16 18:47:31,090 p=10 u=root |  ok: [node1 -> localhost] => {
    "msg": "WAIT_FOR_RESULT:  3 hosts finished running their containers"
}
2018-05-16 18:47:31,095 p=10 u=root |  TASK [baseliner : get result of container execution] ***************************
2018-05-16 18:47:31,095 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.020)       0:05:25.179 ********* 
2018-05-16 18:47:31,401 p=10 u=root |  fatal: [node3]: FAILED! => {"ansible_job_id": "558897480963.185", "changed": true, "cmd": "docker run --rm --name baseliner_node3  -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"175.20.0.0/16\" -e CLIENT=\"True\" -e MON_IP=\"175.20.0.12\" --net=cephnet -v /tmp/baseliner_output_node3:/results -v /tmp/baseliner_output_node3:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:04:57.662855", "end": "2018-05-16 18:47:15.578911", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 137, "start": "2018-05-16 18:42:17.916056", "stderr": "+ '[' -z '' ']'\n+ '[' -z '' ']'\n+ '[' -z True ']'\n+ '[' -z 175.20.0.0/16 ']'\n+ '[' -z 175.20.0.12 ']'\n+ sed -i -e s@monip@175.20.0.12@ /etc/ceph/ceph.conf\n+ sed -i -e s@cephnet@175.20.0.0/16@ /etc/ceph/ceph.conf\n+ '[' -f /etc/ceph/extra.conf ']'\n+ '[' -n '' ']'\n+ '[' -n '' ']'\n+ '[' -n True ']'\n+ '[' -z '' ']'\n+ echo 'No CLIENT_SCRIPT defined, running built-in radosbench script.'\n+ CLIENT_SCRIPT=run_radosbench\n+ ceph_health_ok\n2018-05-16 18:42:19.885161 7f5c23eb0700 -1 auth: unable to find a keyring on /etc/ceph/ceph.client.admin.keyring,/etc/ceph/ceph.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin,: (2) No such file or directory", "stderr_lines": ["+ '[' -z '' ']'", "+ '[' -z '' ']'", "+ '[' -z True ']'", "+ '[' -z 175.20.0.0/16 ']'", "+ '[' -z 175.20.0.12 ']'", "+ sed -i -e s@monip@175.20.0.12@ /etc/ceph/ceph.conf", "+ sed -i -e s@cephnet@175.20.0.0/16@ /etc/ceph/ceph.conf", "+ '[' -f /etc/ceph/extra.conf ']'", "+ '[' -n '' ']'", "+ '[' -n '' ']'", "+ '[' -n True ']'", "+ '[' -z '' ']'", "+ echo 'No CLIENT_SCRIPT defined, running built-in radosbench script.'", "+ CLIENT_SCRIPT=run_radosbench", "+ ceph_health_ok", "2018-05-16 18:42:19.885161 7f5c23eb0700 -1 auth: unable to find a keyring on /etc/ceph/ceph.client.admin.keyring,/etc/ceph/ceph.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin,: (2) No such file or directory"], "stdout": "No CLIENT_SCRIPT defined, running built-in radosbench script.", "stdout_lines": ["No CLIENT_SCRIPT defined, running built-in radosbench script."]}
2018-05-16 18:47:31,402 p=10 u=root |  ...ignoring
2018-05-16 18:47:31,419 p=10 u=root |  fatal: [node2]: FAILED! => {"ansible_job_id": "441379097897.177", "changed": true, "cmd": "docker run --rm --name baseliner_node2  -e repetition=\"1\" -e CEPH_PUBLIC_NETWORK=\"175.20.0.0/16\" -e MON_IP=\"175.20.0.12\" -e OSD=\"True\" --net=cephnet -v /tmp/baseliner_output_node2:/results -v /tmp/baseliner_output_node2:/output rados_bench:master-ec8d33f-luminous-ubuntu-16.04-x86_64 ", "delta": "0:00:01.572580", "end": "2018-05-16 18:42:19.488607", "failed": true, "finished": 1, "msg": "non-zero return code", "rc": 1, "start": "2018-05-16 18:42:17.916027", "stderr": "+ '[' -z '' ']'\n+ '[' -z True ']'\n+ '[' -z 175.20.0.0/16 ']'\n+ '[' -z 175.20.0.12 ']'\n+ sed -i -e s@monip@175.20.0.12@ /etc/ceph/ceph.conf\n+ sed -i -e s@cephnet@175.20.0.0/16@ /etc/ceph/ceph.conf\n+ '[' -f /etc/ceph/extra.conf ']'\n+ '[' -n '' ']'\n+ '[' -n True ']'\n+ '[' -n '' ']'\n+ exec run_osds\n+ '[' -z '' ']'\n+ echo 'Expecting OSD_DEVICES variable'\n+ exit 1", "stderr_lines": ["+ '[' -z '' ']'", "+ '[' -z True ']'", "+ '[' -z 175.20.0.0/16 ']'", "+ '[' -z 175.20.0.12 ']'", "+ sed -i -e s@monip@175.20.0.12@ /etc/ceph/ceph.conf", "+ sed -i -e s@cephnet@175.20.0.0/16@ /etc/ceph/ceph.conf", "+ '[' -f /etc/ceph/extra.conf ']'", "+ '[' -n '' ']'", "+ '[' -n True ']'", "+ '[' -n '' ']'", "+ exec run_osds", "+ '[' -z '' ']'", "+ echo 'Expecting OSD_DEVICES variable'", "+ exit 1"], "stdout": "Expecting OSD_DEVICES variable", "stdout_lines": ["Expecting OSD_DEVICES variable"]}
2018-05-16 18:47:31,419 p=10 u=root |  ...ignoring
2018-05-16 18:47:31,422 p=10 u=root |  changed: [node1]
2018-05-16 18:47:31,428 p=10 u=root |  TASK [baseliner : set fact to store result of bench execution] *****************
2018-05-16 18:47:31,428 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.332)       0:05:25.511 ********* 
2018-05-16 18:47:31,446 p=10 u=root |  ok: [node1 -> localhost]
2018-05-16 18:47:31,457 p=10 u=root |  TASK [baseliner : record elapsed time in output folder] ************************
2018-05-16 18:47:31,457 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.029)       0:05:25.540 ********* 
2018-05-16 18:47:31,687 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 18:47:31,688 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:47:31,715 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 18:47:31,722 p=10 u=root |  TASK [baseliner : capture stdout] **********************************************
2018-05-16 18:47:31,722 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.264)       0:05:25.805 ********* 
2018-05-16 18:47:31,943 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 18:47:31,946 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:47:31,978 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 18:47:31,985 p=10 u=root |  TASK [baseliner : capture stderr] **********************************************
2018-05-16 18:47:31,985 p=10 u=root |  Wednesday 16 May 2018  18:47:31 +0000 (0:00:00.262)       0:05:26.068 ********* 
2018-05-16 18:47:32,205 p=10 u=root |  changed: [node2 -> localhost]
2018-05-16 18:47:32,205 p=10 u=root |  changed: [node1 -> localhost]
2018-05-16 18:47:32,222 p=10 u=root |  changed: [node3 -> localhost]
2018-05-16 18:47:32,228 p=10 u=root |  TASK [baseliner : debug] *******************************************************
2018-05-16 18:47:32,229 p=10 u=root |  Wednesday 16 May 2018  18:47:32 +0000 (0:00:00.243)       0:05:26.312 ********* 
2018-05-16 18:47:32,293 p=10 u=root |  ok: [node2] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-16 18:47:32,301 p=10 u=root |  ok: [node3] => {
    "msg": "WARNING: container terminated with non-zero exit code."
}
2018-05-16 18:47:32,306 p=10 u=root |  TASK [baseliner : run compose benchmark] ***************************************
2018-05-16 18:47:32,306 p=10 u=root |  Wednesday 16 May 2018  18:47:32 +0000 (0:00:00.077)       0:05:26.389 ********* 
2018-05-16 18:47:32,335 p=10 u=root |  TASK [baseliner : run script benchmark] ****************************************
2018-05-16 18:47:32,335 p=10 u=root |  Wednesday 16 May 2018  18:47:32 +0000 (0:00:00.029)       0:05:26.418 ********* 
2018-05-16 18:47:32,365 p=10 u=root |  TASK [baseliner : download results] ********************************************
2018-05-16 18:47:32,366 p=10 u=root |  Wednesday 16 May 2018  18:47:32 +0000 (0:00:00.030)       0:05:26.449 ********* 
2018-05-16 18:47:32,409 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/download-output.yml for node1, node2, node3
2018-05-16 18:47:32,465 p=10 u=root |  TASK [baseliner : get any bench-specific files] ********************************
2018-05-16 18:47:32,466 p=10 u=root |  Wednesday 16 May 2018  18:47:32 +0000 (0:00:00.099)       0:05:26.549 ********* 
2018-05-16 18:47:33,329 p=10 u=root |  changed: [node2] => (item=/tmp/baseliner_output_node2)
2018-05-16 18:47:33,330 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-16 18:47:33,339 p=10 u=root |  changed: [node3] => (item=/tmp/baseliner_output_node3)
2018-05-16 18:47:33,345 p=10 u=root |  TASK [baseliner : delete remote folder after transfer] *************************
2018-05-16 18:47:33,345 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.879)       0:05:27.428 ********* 
2018-05-16 18:47:33,586 p=10 u=root |  changed: [node1] => (item=/tmp/baseliner_output_node1)
2018-05-16 18:47:33,605 p=10 u=root |  changed: [node2] => (item=/tmp/baseliner_output_node2)
2018-05-16 18:47:33,658 p=10 u=root |  changed: [node3] => (item=/tmp/baseliner_output_node3)
2018-05-16 18:47:33,662 p=10 u=root |  TASK [baseliner : check if we should fail fast] ********************************
2018-05-16 18:47:33,662 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.317)       0:05:27.745 ********* 
2018-05-16 18:47:33,709 p=10 u=root |  included: /etc/ansible/roles/baseliner/tasks/fail-fast.yml for node1, node2, node3
2018-05-16 18:47:33,803 p=10 u=root |  TASK [baseliner : failfast for single-node mode] *******************************
2018-05-16 18:47:33,804 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.141)       0:05:27.887 ********* 
2018-05-16 18:47:33,829 p=10 u=root |  TASK [baseliner : failfast for parallel mode] **********************************
2018-05-16 18:47:33,829 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.025)       0:05:27.912 ********* 
2018-05-16 18:47:33,849 p=10 u=root |  TASK [baseliner : stop monitoring] *********************************************
2018-05-16 18:47:33,849 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.020)       0:05:27.932 ********* 
2018-05-16 18:47:33,878 p=10 u=root |  TASK [baseliner : include_tasks] ***********************************************
2018-05-16 18:47:33,879 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.029)       0:05:27.962 ********* 
2018-05-16 18:47:33,906 p=10 u=root |  PLAY RECAP *********************************************************************
2018-05-16 18:47:33,906 p=10 u=root |  node1                      : ok=46   changed=16   unreachable=0    failed=0   
2018-05-16 18:47:33,907 p=10 u=root |  node2                      : ok=40   changed=13   unreachable=0    failed=0   
2018-05-16 18:47:33,907 p=10 u=root |  node3                      : ok=40   changed=13   unreachable=0    failed=0   
2018-05-16 18:47:33,907 p=10 u=root |  Wednesday 16 May 2018  18:47:33 +0000 (0:00:00.028)       0:05:27.990 ********* 
2018-05-16 18:47:33,907 p=10 u=root |  =============================================================================== 
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : wait for containers in single-node mode and stop/kill them if they timeout - 312.14s
2018-05-16 18:47:33,908 p=10 u=root |  Gathering Facts --------------------------------------------------------- 4.25s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : pull image -------------------------------------------------- 1.45s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : run container ----------------------------------------------- 1.18s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : get any bench-specific files -------------------------------- 0.88s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : store facts about remotes ----------------------------------- 0.77s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : remove containers to avoid name clashes --------------------- 0.74s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : check if image already exists ------------------------------- 0.64s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : get result of container execution --------------------------- 0.33s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : delete remote folder after transfer ------------------------- 0.32s
2018-05-16 18:47:33,908 p=10 u=root |  baseliner : record elapsed time in output folder ------------------------ 0.26s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : capture stdout ---------------------------------------------- 0.26s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : capture stderr ---------------------------------------------- 0.24s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : remove remote results folder -------------------------------- 0.24s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : ensure results folder exists -------------------------------- 0.23s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : create remote results folder -------------------------------- 0.21s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : add host-specific environment to docker_flags --------------- 0.20s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : ensure output folder exists --------------------------------- 0.15s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : check if we should fail fast -------------------------------- 0.14s
2018-05-16 18:47:33,909 p=10 u=root |  baseliner : create facts folder if it doesn't exist --------------------- 0.14s
2018-05-16 18:47:33,909 p=10 u=root |  Playbook run took 0 days, 0 hours, 5 minutes, 27 seconds
